// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Polyline__dummysDeclaration__ models.Polyline
var __Polyline_time__dummyDeclaration time.Duration

// An PolylineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPolyline updatePolyline deletePolyline
type PolylineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PolylineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPolyline updatePolyline
type PolylineInput struct {
	// The Polyline to submit or modify
	// in: body
	Polyline *orm.PolylineAPI
}

// GetPolylines
//
// swagger:route GET /polylines polylines getPolylines
//
// Get all polylines
//
// Responses:
//    default: genericError
//        200: polylineDBsResponse
func GetPolylines(c *gin.Context) {
	db := orm.BackRepo.BackRepoPolyline.GetDB()

	// source slice
	var polylineDBs []orm.PolylineDB
	query := db.Find(&polylineDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	polylineAPIs := make([]orm.PolylineAPI, 0)

	// for each polyline, update fields from the database nullable fields
	for idx := range polylineDBs {
		polylineDB := &polylineDBs[idx]
		_ = polylineDB
		var polylineAPI orm.PolylineAPI

		// insertion point for updating fields
		polylineAPI.ID = polylineDB.ID
		polylineDB.CopyBasicFieldsToPolyline(&polylineAPI.Polyline)
		polylineAPI.PolylinePointersEnconding = polylineDB.PolylinePointersEnconding
		polylineAPIs = append(polylineAPIs, polylineAPI)
	}

	c.JSON(http.StatusOK, polylineAPIs)
}

// PostPolyline
//
// swagger:route POST /polylines polylines postPolyline
//
// Creates a polyline
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: polylineDBResponse
func PostPolyline(c *gin.Context) {
	db := orm.BackRepo.BackRepoPolyline.GetDB()

	// Validate input
	var input orm.PolylineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create polyline
	polylineDB := orm.PolylineDB{}
	polylineDB.PolylinePointersEnconding = input.PolylinePointersEnconding
	polylineDB.CopyBasicFieldsFromPolyline(&input.Polyline)

	query := db.Create(&polylineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, polylineDB)
}

// GetPolyline
//
// swagger:route GET /polylines/{ID} polylines getPolyline
//
// Gets the details for a polyline.
//
// Responses:
//    default: genericError
//        200: polylineDBResponse
func GetPolyline(c *gin.Context) {
	db := orm.BackRepo.BackRepoPolyline.GetDB()

	// Get polylineDB in DB
	var polylineDB orm.PolylineDB
	if err := db.First(&polylineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var polylineAPI orm.PolylineAPI
	polylineAPI.ID = polylineDB.ID
	polylineAPI.PolylinePointersEnconding = polylineDB.PolylinePointersEnconding
	polylineDB.CopyBasicFieldsToPolyline(&polylineAPI.Polyline)

	c.JSON(http.StatusOK, polylineAPI)
}

// UpdatePolyline
//
// swagger:route PATCH /polylines/{ID} polylines updatePolyline
//
// Update a polyline
//
// Responses:
//    default: genericError
//        200: polylineDBResponse
func UpdatePolyline(c *gin.Context) {
	db := orm.BackRepo.BackRepoPolyline.GetDB()

	// Get model if exist
	var polylineDB orm.PolylineDB

	// fetch the polyline
	query := db.First(&polylineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PolylineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	polylineDB.CopyBasicFieldsFromPolyline(&input.Polyline)
	polylineDB.PolylinePointersEnconding = input.PolylinePointersEnconding

	query = db.Model(&polylineDB).Updates(polylineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the polylineDB
	c.JSON(http.StatusOK, polylineDB)
}

// DeletePolyline
//
// swagger:route DELETE /polylines/{ID} polylines deletePolyline
//
// Delete a polyline
//
// Responses:
//    default: genericError
func DeletePolyline(c *gin.Context) {
	db := orm.BackRepo.BackRepoPolyline.GetDB()

	// Get model if exist
	var polylineDB orm.PolylineDB
	if err := db.First(&polylineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&polylineDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
