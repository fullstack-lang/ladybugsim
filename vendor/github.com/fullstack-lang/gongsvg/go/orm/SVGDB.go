// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SVG_sql sql.NullBool
var dummy_SVG_time time.Duration
var dummy_SVG_sort sort.Float64Slice

// SVGAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model svgAPI
type SVGAPI struct {
	gorm.Model

	models.SVG

	// encoding of pointers
	SVGPointersEnconding
}

// SVGPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SVGPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// SVGDB describes a svg in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model svgDB
type SVGDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field svgDB.Display
	// provide the sql storage for the boolan
	Display_Data sql.NullBool

	// Declation for basic field svgDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	SVGPointersEnconding
}

// SVGDBs arrays svgDBs
// swagger:response svgDBsResponse
type SVGDBs []SVGDB

// SVGDBResponse provides response
// swagger:response svgDBResponse
type SVGDBResponse struct {
	SVGDB
}

// SVGWOP is a SVG without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SVGWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Display bool `xlsx:"1"`

	Name string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var SVG_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Display",
	"Name",
}

type BackRepoSVGStruct struct {
	// stores SVGDB according to their gorm ID
	Map_SVGDBID_SVGDB *map[uint]*SVGDB

	// stores SVGDB ID according to SVG address
	Map_SVGPtr_SVGDBID *map[*models.SVG]uint

	// stores SVG according to their gorm ID
	Map_SVGDBID_SVGPtr *map[uint]*models.SVG

	db *gorm.DB
}

func (backRepoSVG *BackRepoSVGStruct) GetDB() *gorm.DB {
	return backRepoSVG.db
}

// GetSVGDBFromSVGPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSVG *BackRepoSVGStruct) GetSVGDBFromSVGPtr(svg *models.SVG) (svgDB *SVGDB) {
	id := (*backRepoSVG.Map_SVGPtr_SVGDBID)[svg]
	svgDB = (*backRepoSVG.Map_SVGDBID_SVGDB)[id]
	return
}

// BackRepoSVG.Init set up the BackRepo of the SVG
func (backRepoSVG *BackRepoSVGStruct) Init(db *gorm.DB) (Error error) {

	if backRepoSVG.Map_SVGDBID_SVGPtr != nil {
		err := errors.New("In Init, backRepoSVG.Map_SVGDBID_SVGPtr should be nil")
		return err
	}

	if backRepoSVG.Map_SVGDBID_SVGDB != nil {
		err := errors.New("In Init, backRepoSVG.Map_SVGDBID_SVGDB should be nil")
		return err
	}

	if backRepoSVG.Map_SVGPtr_SVGDBID != nil {
		err := errors.New("In Init, backRepoSVG.Map_SVGPtr_SVGDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.SVG, 0)
	backRepoSVG.Map_SVGDBID_SVGPtr = &tmp

	tmpDB := make(map[uint]*SVGDB, 0)
	backRepoSVG.Map_SVGDBID_SVGDB = &tmpDB

	tmpID := make(map[*models.SVG]uint, 0)
	backRepoSVG.Map_SVGPtr_SVGDBID = &tmpID

	backRepoSVG.db = db
	return
}

// BackRepoSVG.CommitPhaseOne commits all staged instances of SVG to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for svg := range stage.SVGs {
		backRepoSVG.CommitPhaseOneInstance(svg)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, svg := range *backRepoSVG.Map_SVGDBID_SVGPtr {
		if _, ok := stage.SVGs[svg]; !ok {
			backRepoSVG.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSVG.CommitDeleteInstance commits deletion of SVG to the BackRepo
func (backRepoSVG *BackRepoSVGStruct) CommitDeleteInstance(id uint) (Error error) {

	svg := (*backRepoSVG.Map_SVGDBID_SVGPtr)[id]

	// svg is not staged anymore, remove svgDB
	svgDB := (*backRepoSVG.Map_SVGDBID_SVGDB)[id]
	query := backRepoSVG.db.Unscoped().Delete(&svgDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoSVG.Map_SVGPtr_SVGDBID), svg)
	delete((*backRepoSVG.Map_SVGDBID_SVGPtr), id)
	delete((*backRepoSVG.Map_SVGDBID_SVGDB), id)

	return
}

// BackRepoSVG.CommitPhaseOneInstance commits svg staged instances of SVG to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseOneInstance(svg *models.SVG) (Error error) {

	// check if the svg is not commited yet
	if _, ok := (*backRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {
		return
	}

	// initiate svg
	var svgDB SVGDB
	svgDB.CopyBasicFieldsFromSVG(svg)

	query := backRepoSVG.db.Create(&svgDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoSVG.Map_SVGPtr_SVGDBID)[svg] = svgDB.ID
	(*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID] = svg
	(*backRepoSVG.Map_SVGDBID_SVGDB)[svgDB.ID] = &svgDB

	return
}

// BackRepoSVG.CommitPhaseTwo commits all staged instances of SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, svg := range *backRepoSVG.Map_SVGDBID_SVGPtr {
		backRepoSVG.CommitPhaseTwoInstance(backRepo, idx, svg)
	}

	return
}

// BackRepoSVG.CommitPhaseTwoInstance commits {{structname }} of models.SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, svg *models.SVG) (Error error) {

	// fetch matching svgDB
	if svgDB, ok := (*backRepoSVG.Map_SVGDBID_SVGDB)[idx]; ok {

		svgDB.CopyBasicFieldsFromSVG(svg)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers svg.Rects into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, rectAssocEnd := range svg.Rects {

			// get the back repo instance at the association end
			rectAssocEnd_DB :=
				backRepo.BackRepoRect.GetRectDBFromRectPtr(rectAssocEnd)

			// encode reverse pointer in the association end back repo instance
			rectAssocEnd_DB.SVG_RectsDBID.Int64 = int64(svgDB.ID)
			rectAssocEnd_DB.SVG_RectsDBID.Valid = true
			rectAssocEnd_DB.SVG_RectsDBID_Index.Int64 = int64(idx)
			rectAssocEnd_DB.SVG_RectsDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(rectAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Texts into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, textAssocEnd := range svg.Texts {

			// get the back repo instance at the association end
			textAssocEnd_DB :=
				backRepo.BackRepoText.GetTextDBFromTextPtr(textAssocEnd)

			// encode reverse pointer in the association end back repo instance
			textAssocEnd_DB.SVG_TextsDBID.Int64 = int64(svgDB.ID)
			textAssocEnd_DB.SVG_TextsDBID.Valid = true
			textAssocEnd_DB.SVG_TextsDBID_Index.Int64 = int64(idx)
			textAssocEnd_DB.SVG_TextsDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(textAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Circles into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, circleAssocEnd := range svg.Circles {

			// get the back repo instance at the association end
			circleAssocEnd_DB :=
				backRepo.BackRepoCircle.GetCircleDBFromCirclePtr(circleAssocEnd)

			// encode reverse pointer in the association end back repo instance
			circleAssocEnd_DB.SVG_CirclesDBID.Int64 = int64(svgDB.ID)
			circleAssocEnd_DB.SVG_CirclesDBID.Valid = true
			circleAssocEnd_DB.SVG_CirclesDBID_Index.Int64 = int64(idx)
			circleAssocEnd_DB.SVG_CirclesDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(circleAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Lines into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, lineAssocEnd := range svg.Lines {

			// get the back repo instance at the association end
			lineAssocEnd_DB :=
				backRepo.BackRepoLine.GetLineDBFromLinePtr(lineAssocEnd)

			// encode reverse pointer in the association end back repo instance
			lineAssocEnd_DB.SVG_LinesDBID.Int64 = int64(svgDB.ID)
			lineAssocEnd_DB.SVG_LinesDBID.Valid = true
			lineAssocEnd_DB.SVG_LinesDBID_Index.Int64 = int64(idx)
			lineAssocEnd_DB.SVG_LinesDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(lineAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Ellipses into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, ellipseAssocEnd := range svg.Ellipses {

			// get the back repo instance at the association end
			ellipseAssocEnd_DB :=
				backRepo.BackRepoEllipse.GetEllipseDBFromEllipsePtr(ellipseAssocEnd)

			// encode reverse pointer in the association end back repo instance
			ellipseAssocEnd_DB.SVG_EllipsesDBID.Int64 = int64(svgDB.ID)
			ellipseAssocEnd_DB.SVG_EllipsesDBID.Valid = true
			ellipseAssocEnd_DB.SVG_EllipsesDBID_Index.Int64 = int64(idx)
			ellipseAssocEnd_DB.SVG_EllipsesDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(ellipseAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Polylines into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, polylineAssocEnd := range svg.Polylines {

			// get the back repo instance at the association end
			polylineAssocEnd_DB :=
				backRepo.BackRepoPolyline.GetPolylineDBFromPolylinePtr(polylineAssocEnd)

			// encode reverse pointer in the association end back repo instance
			polylineAssocEnd_DB.SVG_PolylinesDBID.Int64 = int64(svgDB.ID)
			polylineAssocEnd_DB.SVG_PolylinesDBID.Valid = true
			polylineAssocEnd_DB.SVG_PolylinesDBID_Index.Int64 = int64(idx)
			polylineAssocEnd_DB.SVG_PolylinesDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(polylineAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Polygones into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, polygoneAssocEnd := range svg.Polygones {

			// get the back repo instance at the association end
			polygoneAssocEnd_DB :=
				backRepo.BackRepoPolygone.GetPolygoneDBFromPolygonePtr(polygoneAssocEnd)

			// encode reverse pointer in the association end back repo instance
			polygoneAssocEnd_DB.SVG_PolygonesDBID.Int64 = int64(svgDB.ID)
			polygoneAssocEnd_DB.SVG_PolygonesDBID.Valid = true
			polygoneAssocEnd_DB.SVG_PolygonesDBID_Index.Int64 = int64(idx)
			polygoneAssocEnd_DB.SVG_PolygonesDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(polygoneAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers svg.Paths into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, pathAssocEnd := range svg.Paths {

			// get the back repo instance at the association end
			pathAssocEnd_DB :=
				backRepo.BackRepoPath.GetPathDBFromPathPtr(pathAssocEnd)

			// encode reverse pointer in the association end back repo instance
			pathAssocEnd_DB.SVG_PathsDBID.Int64 = int64(svgDB.ID)
			pathAssocEnd_DB.SVG_PathsDBID.Valid = true
			pathAssocEnd_DB.SVG_PathsDBID_Index.Int64 = int64(idx)
			pathAssocEnd_DB.SVG_PathsDBID_Index.Valid = true
			if q := backRepoSVG.db.Save(pathAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoSVG.db.Save(&svgDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SVG intance %s", svg.Name))
		return err
	}

	return
}

// BackRepoSVG.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseOne() (Error error) {

	svgDBArray := make([]SVGDB, 0)
	query := backRepoSVG.db.Find(&svgDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	svgInstancesToBeRemovedFromTheStage := make(map[*models.SVG]any)
	for key, value := range models.Stage.SVGs {
		svgInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, svgDB := range svgDBArray {
		backRepoSVG.CheckoutPhaseOneInstance(&svgDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		svg, ok := (*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID]
		if ok {
			delete(svgInstancesToBeRemovedFromTheStage, svg)
		}
	}

	// remove from stage and back repo's 3 maps all svgs that are not in the checkout
	for svg := range svgInstancesToBeRemovedFromTheStage {
		svg.Unstage()

		// remove instance from the back repo 3 maps
		svgID := (*backRepoSVG.Map_SVGPtr_SVGDBID)[svg]
		delete((*backRepoSVG.Map_SVGPtr_SVGDBID), svg)
		delete((*backRepoSVG.Map_SVGDBID_SVGDB), svgID)
		delete((*backRepoSVG.Map_SVGDBID_SVGPtr), svgID)
	}

	return
}

// CheckoutPhaseOneInstance takes a svgDB that has been found in the DB, updates the backRepo and stages the
// models version of the svgDB
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseOneInstance(svgDB *SVGDB) (Error error) {

	svg, ok := (*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID]
	if !ok {
		svg = new(models.SVG)

		(*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID] = svg
		(*backRepoSVG.Map_SVGPtr_SVGDBID)[svg] = svgDB.ID

		// append model store with the new element
		svg.Name = svgDB.Name_Data.String
		svg.Stage()
	}
	svgDB.CopyBasicFieldsToSVG(svg)

	// preserve pointer to svgDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SVGDBID_SVGDB)[svgDB hold variable pointers
	svgDB_Data := *svgDB
	preservedPtrToSVG := &svgDB_Data
	(*backRepoSVG.Map_SVGDBID_SVGDB)[svgDB.ID] = preservedPtrToSVG

	return
}

// BackRepoSVG.CheckoutPhaseTwo Checkouts all staged instances of SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, svgDB := range *backRepoSVG.Map_SVGDBID_SVGDB {
		backRepoSVG.CheckoutPhaseTwoInstance(backRepo, svgDB)
	}
	return
}

// BackRepoSVG.CheckoutPhaseTwoInstance Checkouts staged instances of SVG to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSVG *BackRepoSVGStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, svgDB *SVGDB) (Error error) {

	svg := (*backRepoSVG.Map_SVGDBID_SVGPtr)[svgDB.ID]
	_ = svg // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem svg.Rects in the stage from the encode in the back repo
	// It parses all RectDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Rects = svg.Rects[:0]
	// 2. loop all instances in the type in the association end
	for _, rectDB_AssocEnd := range *backRepo.BackRepoRect.Map_RectDBID_RectDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if rectDB_AssocEnd.SVG_RectsDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			rect_AssocEnd := (*backRepo.BackRepoRect.Map_RectDBID_RectPtr)[rectDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Rects = append(svg.Rects, rect_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Rects, func(i, j int) bool {
		rectDB_i_ID := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[svg.Rects[i]]
		rectDB_j_ID := (*backRepo.BackRepoRect.Map_RectPtr_RectDBID)[svg.Rects[j]]

		rectDB_i := (*backRepo.BackRepoRect.Map_RectDBID_RectDB)[rectDB_i_ID]
		rectDB_j := (*backRepo.BackRepoRect.Map_RectDBID_RectDB)[rectDB_j_ID]

		return rectDB_i.SVG_RectsDBID_Index.Int64 < rectDB_j.SVG_RectsDBID_Index.Int64
	})

	// This loop redeem svg.Texts in the stage from the encode in the back repo
	// It parses all TextDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Texts = svg.Texts[:0]
	// 2. loop all instances in the type in the association end
	for _, textDB_AssocEnd := range *backRepo.BackRepoText.Map_TextDBID_TextDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if textDB_AssocEnd.SVG_TextsDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			text_AssocEnd := (*backRepo.BackRepoText.Map_TextDBID_TextPtr)[textDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Texts = append(svg.Texts, text_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Texts, func(i, j int) bool {
		textDB_i_ID := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[svg.Texts[i]]
		textDB_j_ID := (*backRepo.BackRepoText.Map_TextPtr_TextDBID)[svg.Texts[j]]

		textDB_i := (*backRepo.BackRepoText.Map_TextDBID_TextDB)[textDB_i_ID]
		textDB_j := (*backRepo.BackRepoText.Map_TextDBID_TextDB)[textDB_j_ID]

		return textDB_i.SVG_TextsDBID_Index.Int64 < textDB_j.SVG_TextsDBID_Index.Int64
	})

	// This loop redeem svg.Circles in the stage from the encode in the back repo
	// It parses all CircleDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Circles = svg.Circles[:0]
	// 2. loop all instances in the type in the association end
	for _, circleDB_AssocEnd := range *backRepo.BackRepoCircle.Map_CircleDBID_CircleDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if circleDB_AssocEnd.SVG_CirclesDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			circle_AssocEnd := (*backRepo.BackRepoCircle.Map_CircleDBID_CirclePtr)[circleDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Circles = append(svg.Circles, circle_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Circles, func(i, j int) bool {
		circleDB_i_ID := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[svg.Circles[i]]
		circleDB_j_ID := (*backRepo.BackRepoCircle.Map_CirclePtr_CircleDBID)[svg.Circles[j]]

		circleDB_i := (*backRepo.BackRepoCircle.Map_CircleDBID_CircleDB)[circleDB_i_ID]
		circleDB_j := (*backRepo.BackRepoCircle.Map_CircleDBID_CircleDB)[circleDB_j_ID]

		return circleDB_i.SVG_CirclesDBID_Index.Int64 < circleDB_j.SVG_CirclesDBID_Index.Int64
	})

	// This loop redeem svg.Lines in the stage from the encode in the back repo
	// It parses all LineDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Lines = svg.Lines[:0]
	// 2. loop all instances in the type in the association end
	for _, lineDB_AssocEnd := range *backRepo.BackRepoLine.Map_LineDBID_LineDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if lineDB_AssocEnd.SVG_LinesDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			line_AssocEnd := (*backRepo.BackRepoLine.Map_LineDBID_LinePtr)[lineDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Lines = append(svg.Lines, line_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Lines, func(i, j int) bool {
		lineDB_i_ID := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[svg.Lines[i]]
		lineDB_j_ID := (*backRepo.BackRepoLine.Map_LinePtr_LineDBID)[svg.Lines[j]]

		lineDB_i := (*backRepo.BackRepoLine.Map_LineDBID_LineDB)[lineDB_i_ID]
		lineDB_j := (*backRepo.BackRepoLine.Map_LineDBID_LineDB)[lineDB_j_ID]

		return lineDB_i.SVG_LinesDBID_Index.Int64 < lineDB_j.SVG_LinesDBID_Index.Int64
	})

	// This loop redeem svg.Ellipses in the stage from the encode in the back repo
	// It parses all EllipseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Ellipses = svg.Ellipses[:0]
	// 2. loop all instances in the type in the association end
	for _, ellipseDB_AssocEnd := range *backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if ellipseDB_AssocEnd.SVG_EllipsesDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			ellipse_AssocEnd := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipsePtr)[ellipseDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Ellipses = append(svg.Ellipses, ellipse_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Ellipses, func(i, j int) bool {
		ellipseDB_i_ID := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[svg.Ellipses[i]]
		ellipseDB_j_ID := (*backRepo.BackRepoEllipse.Map_EllipsePtr_EllipseDBID)[svg.Ellipses[j]]

		ellipseDB_i := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB_i_ID]
		ellipseDB_j := (*backRepo.BackRepoEllipse.Map_EllipseDBID_EllipseDB)[ellipseDB_j_ID]

		return ellipseDB_i.SVG_EllipsesDBID_Index.Int64 < ellipseDB_j.SVG_EllipsesDBID_Index.Int64
	})

	// This loop redeem svg.Polylines in the stage from the encode in the back repo
	// It parses all PolylineDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Polylines = svg.Polylines[:0]
	// 2. loop all instances in the type in the association end
	for _, polylineDB_AssocEnd := range *backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if polylineDB_AssocEnd.SVG_PolylinesDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			polyline_AssocEnd := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylinePtr)[polylineDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Polylines = append(svg.Polylines, polyline_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Polylines, func(i, j int) bool {
		polylineDB_i_ID := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[svg.Polylines[i]]
		polylineDB_j_ID := (*backRepo.BackRepoPolyline.Map_PolylinePtr_PolylineDBID)[svg.Polylines[j]]

		polylineDB_i := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDB_i_ID]
		polylineDB_j := (*backRepo.BackRepoPolyline.Map_PolylineDBID_PolylineDB)[polylineDB_j_ID]

		return polylineDB_i.SVG_PolylinesDBID_Index.Int64 < polylineDB_j.SVG_PolylinesDBID_Index.Int64
	})

	// This loop redeem svg.Polygones in the stage from the encode in the back repo
	// It parses all PolygoneDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Polygones = svg.Polygones[:0]
	// 2. loop all instances in the type in the association end
	for _, polygoneDB_AssocEnd := range *backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if polygoneDB_AssocEnd.SVG_PolygonesDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			polygone_AssocEnd := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygonePtr)[polygoneDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Polygones = append(svg.Polygones, polygone_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Polygones, func(i, j int) bool {
		polygoneDB_i_ID := (*backRepo.BackRepoPolygone.Map_PolygonePtr_PolygoneDBID)[svg.Polygones[i]]
		polygoneDB_j_ID := (*backRepo.BackRepoPolygone.Map_PolygonePtr_PolygoneDBID)[svg.Polygones[j]]

		polygoneDB_i := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB)[polygoneDB_i_ID]
		polygoneDB_j := (*backRepo.BackRepoPolygone.Map_PolygoneDBID_PolygoneDB)[polygoneDB_j_ID]

		return polygoneDB_i.SVG_PolygonesDBID_Index.Int64 < polygoneDB_j.SVG_PolygonesDBID_Index.Int64
	})

	// This loop redeem svg.Paths in the stage from the encode in the back repo
	// It parses all PathDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	svg.Paths = svg.Paths[:0]
	// 2. loop all instances in the type in the association end
	for _, pathDB_AssocEnd := range *backRepo.BackRepoPath.Map_PathDBID_PathDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if pathDB_AssocEnd.SVG_PathsDBID.Int64 == int64(svgDB.ID) {
			// 4. fetch the associated instance in the stage
			path_AssocEnd := (*backRepo.BackRepoPath.Map_PathDBID_PathPtr)[pathDB_AssocEnd.ID]
			// 5. append it the association slice
			svg.Paths = append(svg.Paths, path_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(svg.Paths, func(i, j int) bool {
		pathDB_i_ID := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[svg.Paths[i]]
		pathDB_j_ID := (*backRepo.BackRepoPath.Map_PathPtr_PathDBID)[svg.Paths[j]]

		pathDB_i := (*backRepo.BackRepoPath.Map_PathDBID_PathDB)[pathDB_i_ID]
		pathDB_j := (*backRepo.BackRepoPath.Map_PathDBID_PathDB)[pathDB_j_ID]

		return pathDB_i.SVG_PathsDBID_Index.Int64 < pathDB_j.SVG_PathsDBID_Index.Int64
	})

	return
}

// CommitSVG allows commit of a single svg (if already staged)
func (backRepo *BackRepoStruct) CommitSVG(svg *models.SVG) {
	backRepo.BackRepoSVG.CommitPhaseOneInstance(svg)
	if id, ok := (*backRepo.BackRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {
		backRepo.BackRepoSVG.CommitPhaseTwoInstance(backRepo, id, svg)
	}
}

// CommitSVG allows checkout of a single svg (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSVG(svg *models.SVG) {
	// check if the svg is staged
	if _, ok := (*backRepo.BackRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {

		if id, ok := (*backRepo.BackRepoSVG.Map_SVGPtr_SVGDBID)[svg]; ok {
			var svgDB SVGDB
			svgDB.ID = id

			if err := backRepo.BackRepoSVG.db.First(&svgDB, id).Error; err != nil {
				log.Panicln("CheckoutSVG : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSVG.CheckoutPhaseOneInstance(&svgDB)
			backRepo.BackRepoSVG.CheckoutPhaseTwoInstance(backRepo, &svgDB)
		}
	}
}

// CopyBasicFieldsFromSVG
func (svgDB *SVGDB) CopyBasicFieldsFromSVG(svg *models.SVG) {
	// insertion point for fields commit

	svgDB.Display_Data.Bool = svg.Display
	svgDB.Display_Data.Valid = true

	svgDB.Name_Data.String = svg.Name
	svgDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSVGWOP
func (svgDB *SVGDB) CopyBasicFieldsFromSVGWOP(svg *SVGWOP) {
	// insertion point for fields commit

	svgDB.Display_Data.Bool = svg.Display
	svgDB.Display_Data.Valid = true

	svgDB.Name_Data.String = svg.Name
	svgDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSVG
func (svgDB *SVGDB) CopyBasicFieldsToSVG(svg *models.SVG) {
	// insertion point for checkout of basic fields (back repo to stage)
	svg.Display = svgDB.Display_Data.Bool
	svg.Name = svgDB.Name_Data.String
}

// CopyBasicFieldsToSVGWOP
func (svgDB *SVGDB) CopyBasicFieldsToSVGWOP(svg *SVGWOP) {
	svg.ID = int(svgDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	svg.Display = svgDB.Display_Data.Bool
	svg.Name = svgDB.Name_Data.String
}

// Backup generates a json file from a slice of all SVGDB instances in the backrepo
func (backRepoSVG *BackRepoSVGStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SVGDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SVGDB, 0)
	for _, svgDB := range *backRepoSVG.Map_SVGDBID_SVGDB {
		forBackup = append(forBackup, svgDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json SVG ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json SVG file", err.Error())
	}
}

// Backup generates a json file from a slice of all SVGDB instances in the backrepo
func (backRepoSVG *BackRepoSVGStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SVGDB, 0)
	for _, svgDB := range *backRepoSVG.Map_SVGDBID_SVGDB {
		forBackup = append(forBackup, svgDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SVG")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SVG_Fields, -1)
	for _, svgDB := range forBackup {

		var svgWOP SVGWOP
		svgDB.CopyBasicFieldsToSVGWOP(&svgWOP)

		row := sh.AddRow()
		row.WriteStruct(&svgWOP, -1)
	}
}

// RestoreXL from the "SVG" sheet all SVGDB instances
func (backRepoSVG *BackRepoSVGStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSVGid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SVG"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSVG.rowVisitorSVG)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoSVG *BackRepoSVGStruct) rowVisitorSVG(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var svgWOP SVGWOP
		row.ReadStruct(&svgWOP)

		// add the unmarshalled struct to the stage
		svgDB := new(SVGDB)
		svgDB.CopyBasicFieldsFromSVGWOP(&svgWOP)

		svgDB_ID_atBackupTime := svgDB.ID
		svgDB.ID = 0
		query := backRepoSVG.db.Create(svgDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoSVG.Map_SVGDBID_SVGDB)[svgDB.ID] = svgDB
		BackRepoSVGid_atBckpTime_newID[svgDB_ID_atBackupTime] = svgDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SVGDB.json" in dirPath that stores an array
// of SVGDB and stores it in the database
// the map BackRepoSVGid_atBckpTime_newID is updated accordingly
func (backRepoSVG *BackRepoSVGStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSVGid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SVGDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json SVG file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SVGDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SVGDBID_SVGDB
	for _, svgDB := range forRestore {

		svgDB_ID_atBackupTime := svgDB.ID
		svgDB.ID = 0
		query := backRepoSVG.db.Create(svgDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoSVG.Map_SVGDBID_SVGDB)[svgDB.ID] = svgDB
		BackRepoSVGid_atBckpTime_newID[svgDB_ID_atBackupTime] = svgDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json SVG file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SVG>id_atBckpTime_newID
// to compute new index
func (backRepoSVG *BackRepoSVGStruct) RestorePhaseTwo() {

	for _, svgDB := range *backRepoSVG.Map_SVGDBID_SVGDB {

		// next line of code is to avert unused variable compilation error
		_ = svgDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSVG.db.Model(svgDB).Updates(*svgDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSVGid_atBckpTime_newID map[uint]uint
