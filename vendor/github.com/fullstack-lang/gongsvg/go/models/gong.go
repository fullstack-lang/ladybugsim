// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Animates           map[*Animate]struct{}
	Animates_mapString map[string]*Animate

	Circles           map[*Circle]struct{}
	Circles_mapString map[string]*Circle

	Ellipses           map[*Ellipse]struct{}
	Ellipses_mapString map[string]*Ellipse

	Lines           map[*Line]struct{}
	Lines_mapString map[string]*Line

	Paths           map[*Path]struct{}
	Paths_mapString map[string]*Path

	Polygones           map[*Polygone]struct{}
	Polygones_mapString map[string]*Polygone

	Polylines           map[*Polyline]struct{}
	Polylines_mapString map[string]*Polyline

	Rects           map[*Rect]struct{}
	Rects_mapString map[string]*Rect

	SVGs           map[*SVG]struct{}
	SVGs_mapString map[string]*SVG

	Texts           map[*Text]struct{}
	Texts_mapString map[string]*Text

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitAnimate(animate *Animate)
	CheckoutAnimate(animate *Animate)
	CommitCircle(circle *Circle)
	CheckoutCircle(circle *Circle)
	CommitEllipse(ellipse *Ellipse)
	CheckoutEllipse(ellipse *Ellipse)
	CommitLine(line *Line)
	CheckoutLine(line *Line)
	CommitPath(path *Path)
	CheckoutPath(path *Path)
	CommitPolygone(polygone *Polygone)
	CheckoutPolygone(polygone *Polygone)
	CommitPolyline(polyline *Polyline)
	CheckoutPolyline(polyline *Polyline)
	CommitRect(rect *Rect)
	CheckoutRect(rect *Rect)
	CommitSVG(svg *SVG)
	CheckoutSVG(svg *SVG)
	CommitText(text *Text)
	CheckoutText(text *Text)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Animates:           make(map[*Animate]struct{}),
	Animates_mapString: make(map[string]*Animate),

	Circles:           make(map[*Circle]struct{}),
	Circles_mapString: make(map[string]*Circle),

	Ellipses:           make(map[*Ellipse]struct{}),
	Ellipses_mapString: make(map[string]*Ellipse),

	Lines:           make(map[*Line]struct{}),
	Lines_mapString: make(map[string]*Line),

	Paths:           make(map[*Path]struct{}),
	Paths_mapString: make(map[string]*Path),

	Polygones:           make(map[*Polygone]struct{}),
	Polygones_mapString: make(map[string]*Polygone),

	Polylines:           make(map[*Polyline]struct{}),
	Polylines_mapString: make(map[string]*Polyline),

	Rects:           make(map[*Rect]struct{}),
	Rects_mapString: make(map[string]*Rect),

	SVGs:           make(map[*SVG]struct{}),
	SVGs_mapString: make(map[string]*SVG),

	Texts:           make(map[*Text]struct{}),
	Texts_mapString: make(map[string]*Text),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Animate"] = len(stage.Animates)
	stage.Map_GongStructName_InstancesNb["Circle"] = len(stage.Circles)
	stage.Map_GongStructName_InstancesNb["Ellipse"] = len(stage.Ellipses)
	stage.Map_GongStructName_InstancesNb["Line"] = len(stage.Lines)
	stage.Map_GongStructName_InstancesNb["Path"] = len(stage.Paths)
	stage.Map_GongStructName_InstancesNb["Polygone"] = len(stage.Polygones)
	stage.Map_GongStructName_InstancesNb["Polyline"] = len(stage.Polylines)
	stage.Map_GongStructName_InstancesNb["Rect"] = len(stage.Rects)
	stage.Map_GongStructName_InstancesNb["SVG"] = len(stage.SVGs)
	stage.Map_GongStructName_InstancesNb["Text"] = len(stage.Texts)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getAnimateOrderedStructWithNameField() []*Animate {
	// have alphabetical order generation
	animateOrdered := []*Animate{}
	for animate := range stage.Animates {
		animateOrdered = append(animateOrdered, animate)
	}
	sort.Slice(animateOrdered[:], func(i, j int) bool {
		return animateOrdered[i].Name < animateOrdered[j].Name
	})
	return animateOrdered
}

// Stage puts animate to the model stage
func (animate *Animate) Stage() *Animate {
	Stage.Animates[animate] = __member
	Stage.Animates_mapString[animate.Name] = animate

	return animate
}

// Unstage removes animate off the model stage
func (animate *Animate) Unstage() *Animate {
	delete(Stage.Animates, animate)
	delete(Stage.Animates_mapString, animate.Name)
	return animate
}

// commit animate to the back repo (if it is already staged)
func (animate *Animate) Commit() *Animate {
	if _, ok := Stage.Animates[animate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitAnimate(animate)
		}
	}
	return animate
}

// Checkout animate to the back repo (if it is already staged)
func (animate *Animate) Checkout() *Animate {
	if _, ok := Stage.Animates[animate]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutAnimate(animate)
		}
	}
	return animate
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of animate to the model stage
func (animate *Animate) StageCopy() *Animate {
	_animate := new(Animate)
	*_animate = *animate
	_animate.Stage()
	return _animate
}

// StageAndCommit appends animate to the model stage and commit to the orm repo
func (animate *Animate) StageAndCommit() *Animate {
	animate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAnimate(animate)
	}
	return animate
}

// DeleteStageAndCommit appends animate to the model stage and commit to the orm repo
func (animate *Animate) DeleteStageAndCommit() *Animate {
	animate.Unstage()
	DeleteORMAnimate(animate)
	return animate
}

// StageCopyAndCommit appends a copy of animate to the model stage and commit to the orm repo
func (animate *Animate) StageCopyAndCommit() *Animate {
	_animate := new(Animate)
	*_animate = *animate
	_animate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAnimate(animate)
	}
	return _animate
}

// CreateORMAnimate enables dynamic staging of a Animate instance
func CreateORMAnimate(animate *Animate) {
	animate.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMAnimate(animate)
	}
}

// DeleteORMAnimate enables dynamic staging of a Animate instance
func DeleteORMAnimate(animate *Animate) {
	animate.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMAnimate(animate)
	}
}

func (stage *StageStruct) getCircleOrderedStructWithNameField() []*Circle {
	// have alphabetical order generation
	circleOrdered := []*Circle{}
	for circle := range stage.Circles {
		circleOrdered = append(circleOrdered, circle)
	}
	sort.Slice(circleOrdered[:], func(i, j int) bool {
		return circleOrdered[i].Name < circleOrdered[j].Name
	})
	return circleOrdered
}

// Stage puts circle to the model stage
func (circle *Circle) Stage() *Circle {
	Stage.Circles[circle] = __member
	Stage.Circles_mapString[circle.Name] = circle

	return circle
}

// Unstage removes circle off the model stage
func (circle *Circle) Unstage() *Circle {
	delete(Stage.Circles, circle)
	delete(Stage.Circles_mapString, circle.Name)
	return circle
}

// commit circle to the back repo (if it is already staged)
func (circle *Circle) Commit() *Circle {
	if _, ok := Stage.Circles[circle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCircle(circle)
		}
	}
	return circle
}

// Checkout circle to the back repo (if it is already staged)
func (circle *Circle) Checkout() *Circle {
	if _, ok := Stage.Circles[circle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCircle(circle)
		}
	}
	return circle
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of circle to the model stage
func (circle *Circle) StageCopy() *Circle {
	_circle := new(Circle)
	*_circle = *circle
	_circle.Stage()
	return _circle
}

// StageAndCommit appends circle to the model stage and commit to the orm repo
func (circle *Circle) StageAndCommit() *Circle {
	circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
	return circle
}

// DeleteStageAndCommit appends circle to the model stage and commit to the orm repo
func (circle *Circle) DeleteStageAndCommit() *Circle {
	circle.Unstage()
	DeleteORMCircle(circle)
	return circle
}

// StageCopyAndCommit appends a copy of circle to the model stage and commit to the orm repo
func (circle *Circle) StageCopyAndCommit() *Circle {
	_circle := new(Circle)
	*_circle = *circle
	_circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
	return _circle
}

// CreateORMCircle enables dynamic staging of a Circle instance
func CreateORMCircle(circle *Circle) {
	circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
}

// DeleteORMCircle enables dynamic staging of a Circle instance
func DeleteORMCircle(circle *Circle) {
	circle.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCircle(circle)
	}
}

func (stage *StageStruct) getEllipseOrderedStructWithNameField() []*Ellipse {
	// have alphabetical order generation
	ellipseOrdered := []*Ellipse{}
	for ellipse := range stage.Ellipses {
		ellipseOrdered = append(ellipseOrdered, ellipse)
	}
	sort.Slice(ellipseOrdered[:], func(i, j int) bool {
		return ellipseOrdered[i].Name < ellipseOrdered[j].Name
	})
	return ellipseOrdered
}

// Stage puts ellipse to the model stage
func (ellipse *Ellipse) Stage() *Ellipse {
	Stage.Ellipses[ellipse] = __member
	Stage.Ellipses_mapString[ellipse.Name] = ellipse

	return ellipse
}

// Unstage removes ellipse off the model stage
func (ellipse *Ellipse) Unstage() *Ellipse {
	delete(Stage.Ellipses, ellipse)
	delete(Stage.Ellipses_mapString, ellipse.Name)
	return ellipse
}

// commit ellipse to the back repo (if it is already staged)
func (ellipse *Ellipse) Commit() *Ellipse {
	if _, ok := Stage.Ellipses[ellipse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitEllipse(ellipse)
		}
	}
	return ellipse
}

// Checkout ellipse to the back repo (if it is already staged)
func (ellipse *Ellipse) Checkout() *Ellipse {
	if _, ok := Stage.Ellipses[ellipse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutEllipse(ellipse)
		}
	}
	return ellipse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ellipse to the model stage
func (ellipse *Ellipse) StageCopy() *Ellipse {
	_ellipse := new(Ellipse)
	*_ellipse = *ellipse
	_ellipse.Stage()
	return _ellipse
}

// StageAndCommit appends ellipse to the model stage and commit to the orm repo
func (ellipse *Ellipse) StageAndCommit() *Ellipse {
	ellipse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEllipse(ellipse)
	}
	return ellipse
}

// DeleteStageAndCommit appends ellipse to the model stage and commit to the orm repo
func (ellipse *Ellipse) DeleteStageAndCommit() *Ellipse {
	ellipse.Unstage()
	DeleteORMEllipse(ellipse)
	return ellipse
}

// StageCopyAndCommit appends a copy of ellipse to the model stage and commit to the orm repo
func (ellipse *Ellipse) StageCopyAndCommit() *Ellipse {
	_ellipse := new(Ellipse)
	*_ellipse = *ellipse
	_ellipse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEllipse(ellipse)
	}
	return _ellipse
}

// CreateORMEllipse enables dynamic staging of a Ellipse instance
func CreateORMEllipse(ellipse *Ellipse) {
	ellipse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMEllipse(ellipse)
	}
}

// DeleteORMEllipse enables dynamic staging of a Ellipse instance
func DeleteORMEllipse(ellipse *Ellipse) {
	ellipse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMEllipse(ellipse)
	}
}

func (stage *StageStruct) getLineOrderedStructWithNameField() []*Line {
	// have alphabetical order generation
	lineOrdered := []*Line{}
	for line := range stage.Lines {
		lineOrdered = append(lineOrdered, line)
	}
	sort.Slice(lineOrdered[:], func(i, j int) bool {
		return lineOrdered[i].Name < lineOrdered[j].Name
	})
	return lineOrdered
}

// Stage puts line to the model stage
func (line *Line) Stage() *Line {
	Stage.Lines[line] = __member
	Stage.Lines_mapString[line.Name] = line

	return line
}

// Unstage removes line off the model stage
func (line *Line) Unstage() *Line {
	delete(Stage.Lines, line)
	delete(Stage.Lines_mapString, line.Name)
	return line
}

// commit line to the back repo (if it is already staged)
func (line *Line) Commit() *Line {
	if _, ok := Stage.Lines[line]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLine(line)
		}
	}
	return line
}

// Checkout line to the back repo (if it is already staged)
func (line *Line) Checkout() *Line {
	if _, ok := Stage.Lines[line]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLine(line)
		}
	}
	return line
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of line to the model stage
func (line *Line) StageCopy() *Line {
	_line := new(Line)
	*_line = *line
	_line.Stage()
	return _line
}

// StageAndCommit appends line to the model stage and commit to the orm repo
func (line *Line) StageAndCommit() *Line {
	line.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLine(line)
	}
	return line
}

// DeleteStageAndCommit appends line to the model stage and commit to the orm repo
func (line *Line) DeleteStageAndCommit() *Line {
	line.Unstage()
	DeleteORMLine(line)
	return line
}

// StageCopyAndCommit appends a copy of line to the model stage and commit to the orm repo
func (line *Line) StageCopyAndCommit() *Line {
	_line := new(Line)
	*_line = *line
	_line.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLine(line)
	}
	return _line
}

// CreateORMLine enables dynamic staging of a Line instance
func CreateORMLine(line *Line) {
	line.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLine(line)
	}
}

// DeleteORMLine enables dynamic staging of a Line instance
func DeleteORMLine(line *Line) {
	line.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLine(line)
	}
}

func (stage *StageStruct) getPathOrderedStructWithNameField() []*Path {
	// have alphabetical order generation
	pathOrdered := []*Path{}
	for path := range stage.Paths {
		pathOrdered = append(pathOrdered, path)
	}
	sort.Slice(pathOrdered[:], func(i, j int) bool {
		return pathOrdered[i].Name < pathOrdered[j].Name
	})
	return pathOrdered
}

// Stage puts path to the model stage
func (path *Path) Stage() *Path {
	Stage.Paths[path] = __member
	Stage.Paths_mapString[path.Name] = path

	return path
}

// Unstage removes path off the model stage
func (path *Path) Unstage() *Path {
	delete(Stage.Paths, path)
	delete(Stage.Paths_mapString, path.Name)
	return path
}

// commit path to the back repo (if it is already staged)
func (path *Path) Commit() *Path {
	if _, ok := Stage.Paths[path]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitPath(path)
		}
	}
	return path
}

// Checkout path to the back repo (if it is already staged)
func (path *Path) Checkout() *Path {
	if _, ok := Stage.Paths[path]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutPath(path)
		}
	}
	return path
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of path to the model stage
func (path *Path) StageCopy() *Path {
	_path := new(Path)
	*_path = *path
	_path.Stage()
	return _path
}

// StageAndCommit appends path to the model stage and commit to the orm repo
func (path *Path) StageAndCommit() *Path {
	path.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPath(path)
	}
	return path
}

// DeleteStageAndCommit appends path to the model stage and commit to the orm repo
func (path *Path) DeleteStageAndCommit() *Path {
	path.Unstage()
	DeleteORMPath(path)
	return path
}

// StageCopyAndCommit appends a copy of path to the model stage and commit to the orm repo
func (path *Path) StageCopyAndCommit() *Path {
	_path := new(Path)
	*_path = *path
	_path.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPath(path)
	}
	return _path
}

// CreateORMPath enables dynamic staging of a Path instance
func CreateORMPath(path *Path) {
	path.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPath(path)
	}
}

// DeleteORMPath enables dynamic staging of a Path instance
func DeleteORMPath(path *Path) {
	path.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMPath(path)
	}
}

func (stage *StageStruct) getPolygoneOrderedStructWithNameField() []*Polygone {
	// have alphabetical order generation
	polygoneOrdered := []*Polygone{}
	for polygone := range stage.Polygones {
		polygoneOrdered = append(polygoneOrdered, polygone)
	}
	sort.Slice(polygoneOrdered[:], func(i, j int) bool {
		return polygoneOrdered[i].Name < polygoneOrdered[j].Name
	})
	return polygoneOrdered
}

// Stage puts polygone to the model stage
func (polygone *Polygone) Stage() *Polygone {
	Stage.Polygones[polygone] = __member
	Stage.Polygones_mapString[polygone.Name] = polygone

	return polygone
}

// Unstage removes polygone off the model stage
func (polygone *Polygone) Unstage() *Polygone {
	delete(Stage.Polygones, polygone)
	delete(Stage.Polygones_mapString, polygone.Name)
	return polygone
}

// commit polygone to the back repo (if it is already staged)
func (polygone *Polygone) Commit() *Polygone {
	if _, ok := Stage.Polygones[polygone]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitPolygone(polygone)
		}
	}
	return polygone
}

// Checkout polygone to the back repo (if it is already staged)
func (polygone *Polygone) Checkout() *Polygone {
	if _, ok := Stage.Polygones[polygone]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutPolygone(polygone)
		}
	}
	return polygone
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of polygone to the model stage
func (polygone *Polygone) StageCopy() *Polygone {
	_polygone := new(Polygone)
	*_polygone = *polygone
	_polygone.Stage()
	return _polygone
}

// StageAndCommit appends polygone to the model stage and commit to the orm repo
func (polygone *Polygone) StageAndCommit() *Polygone {
	polygone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPolygone(polygone)
	}
	return polygone
}

// DeleteStageAndCommit appends polygone to the model stage and commit to the orm repo
func (polygone *Polygone) DeleteStageAndCommit() *Polygone {
	polygone.Unstage()
	DeleteORMPolygone(polygone)
	return polygone
}

// StageCopyAndCommit appends a copy of polygone to the model stage and commit to the orm repo
func (polygone *Polygone) StageCopyAndCommit() *Polygone {
	_polygone := new(Polygone)
	*_polygone = *polygone
	_polygone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPolygone(polygone)
	}
	return _polygone
}

// CreateORMPolygone enables dynamic staging of a Polygone instance
func CreateORMPolygone(polygone *Polygone) {
	polygone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPolygone(polygone)
	}
}

// DeleteORMPolygone enables dynamic staging of a Polygone instance
func DeleteORMPolygone(polygone *Polygone) {
	polygone.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMPolygone(polygone)
	}
}

func (stage *StageStruct) getPolylineOrderedStructWithNameField() []*Polyline {
	// have alphabetical order generation
	polylineOrdered := []*Polyline{}
	for polyline := range stage.Polylines {
		polylineOrdered = append(polylineOrdered, polyline)
	}
	sort.Slice(polylineOrdered[:], func(i, j int) bool {
		return polylineOrdered[i].Name < polylineOrdered[j].Name
	})
	return polylineOrdered
}

// Stage puts polyline to the model stage
func (polyline *Polyline) Stage() *Polyline {
	Stage.Polylines[polyline] = __member
	Stage.Polylines_mapString[polyline.Name] = polyline

	return polyline
}

// Unstage removes polyline off the model stage
func (polyline *Polyline) Unstage() *Polyline {
	delete(Stage.Polylines, polyline)
	delete(Stage.Polylines_mapString, polyline.Name)
	return polyline
}

// commit polyline to the back repo (if it is already staged)
func (polyline *Polyline) Commit() *Polyline {
	if _, ok := Stage.Polylines[polyline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitPolyline(polyline)
		}
	}
	return polyline
}

// Checkout polyline to the back repo (if it is already staged)
func (polyline *Polyline) Checkout() *Polyline {
	if _, ok := Stage.Polylines[polyline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutPolyline(polyline)
		}
	}
	return polyline
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of polyline to the model stage
func (polyline *Polyline) StageCopy() *Polyline {
	_polyline := new(Polyline)
	*_polyline = *polyline
	_polyline.Stage()
	return _polyline
}

// StageAndCommit appends polyline to the model stage and commit to the orm repo
func (polyline *Polyline) StageAndCommit() *Polyline {
	polyline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPolyline(polyline)
	}
	return polyline
}

// DeleteStageAndCommit appends polyline to the model stage and commit to the orm repo
func (polyline *Polyline) DeleteStageAndCommit() *Polyline {
	polyline.Unstage()
	DeleteORMPolyline(polyline)
	return polyline
}

// StageCopyAndCommit appends a copy of polyline to the model stage and commit to the orm repo
func (polyline *Polyline) StageCopyAndCommit() *Polyline {
	_polyline := new(Polyline)
	*_polyline = *polyline
	_polyline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPolyline(polyline)
	}
	return _polyline
}

// CreateORMPolyline enables dynamic staging of a Polyline instance
func CreateORMPolyline(polyline *Polyline) {
	polyline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMPolyline(polyline)
	}
}

// DeleteORMPolyline enables dynamic staging of a Polyline instance
func DeleteORMPolyline(polyline *Polyline) {
	polyline.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMPolyline(polyline)
	}
}

func (stage *StageStruct) getRectOrderedStructWithNameField() []*Rect {
	// have alphabetical order generation
	rectOrdered := []*Rect{}
	for rect := range stage.Rects {
		rectOrdered = append(rectOrdered, rect)
	}
	sort.Slice(rectOrdered[:], func(i, j int) bool {
		return rectOrdered[i].Name < rectOrdered[j].Name
	})
	return rectOrdered
}

// Stage puts rect to the model stage
func (rect *Rect) Stage() *Rect {
	Stage.Rects[rect] = __member
	Stage.Rects_mapString[rect.Name] = rect

	return rect
}

// Unstage removes rect off the model stage
func (rect *Rect) Unstage() *Rect {
	delete(Stage.Rects, rect)
	delete(Stage.Rects_mapString, rect.Name)
	return rect
}

// commit rect to the back repo (if it is already staged)
func (rect *Rect) Commit() *Rect {
	if _, ok := Stage.Rects[rect]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitRect(rect)
		}
	}
	return rect
}

// Checkout rect to the back repo (if it is already staged)
func (rect *Rect) Checkout() *Rect {
	if _, ok := Stage.Rects[rect]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutRect(rect)
		}
	}
	return rect
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of rect to the model stage
func (rect *Rect) StageCopy() *Rect {
	_rect := new(Rect)
	*_rect = *rect
	_rect.Stage()
	return _rect
}

// StageAndCommit appends rect to the model stage and commit to the orm repo
func (rect *Rect) StageAndCommit() *Rect {
	rect.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRect(rect)
	}
	return rect
}

// DeleteStageAndCommit appends rect to the model stage and commit to the orm repo
func (rect *Rect) DeleteStageAndCommit() *Rect {
	rect.Unstage()
	DeleteORMRect(rect)
	return rect
}

// StageCopyAndCommit appends a copy of rect to the model stage and commit to the orm repo
func (rect *Rect) StageCopyAndCommit() *Rect {
	_rect := new(Rect)
	*_rect = *rect
	_rect.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRect(rect)
	}
	return _rect
}

// CreateORMRect enables dynamic staging of a Rect instance
func CreateORMRect(rect *Rect) {
	rect.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRect(rect)
	}
}

// DeleteORMRect enables dynamic staging of a Rect instance
func DeleteORMRect(rect *Rect) {
	rect.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMRect(rect)
	}
}

func (stage *StageStruct) getSVGOrderedStructWithNameField() []*SVG {
	// have alphabetical order generation
	svgOrdered := []*SVG{}
	for svg := range stage.SVGs {
		svgOrdered = append(svgOrdered, svg)
	}
	sort.Slice(svgOrdered[:], func(i, j int) bool {
		return svgOrdered[i].Name < svgOrdered[j].Name
	})
	return svgOrdered
}

// Stage puts svg to the model stage
func (svg *SVG) Stage() *SVG {
	Stage.SVGs[svg] = __member
	Stage.SVGs_mapString[svg.Name] = svg

	return svg
}

// Unstage removes svg off the model stage
func (svg *SVG) Unstage() *SVG {
	delete(Stage.SVGs, svg)
	delete(Stage.SVGs_mapString, svg.Name)
	return svg
}

// commit svg to the back repo (if it is already staged)
func (svg *SVG) Commit() *SVG {
	if _, ok := Stage.SVGs[svg]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitSVG(svg)
		}
	}
	return svg
}

// Checkout svg to the back repo (if it is already staged)
func (svg *SVG) Checkout() *SVG {
	if _, ok := Stage.SVGs[svg]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutSVG(svg)
		}
	}
	return svg
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of svg to the model stage
func (svg *SVG) StageCopy() *SVG {
	_svg := new(SVG)
	*_svg = *svg
	_svg.Stage()
	return _svg
}

// StageAndCommit appends svg to the model stage and commit to the orm repo
func (svg *SVG) StageAndCommit() *SVG {
	svg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSVG(svg)
	}
	return svg
}

// DeleteStageAndCommit appends svg to the model stage and commit to the orm repo
func (svg *SVG) DeleteStageAndCommit() *SVG {
	svg.Unstage()
	DeleteORMSVG(svg)
	return svg
}

// StageCopyAndCommit appends a copy of svg to the model stage and commit to the orm repo
func (svg *SVG) StageCopyAndCommit() *SVG {
	_svg := new(SVG)
	*_svg = *svg
	_svg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSVG(svg)
	}
	return _svg
}

// CreateORMSVG enables dynamic staging of a SVG instance
func CreateORMSVG(svg *SVG) {
	svg.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSVG(svg)
	}
}

// DeleteORMSVG enables dynamic staging of a SVG instance
func DeleteORMSVG(svg *SVG) {
	svg.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMSVG(svg)
	}
}

func (stage *StageStruct) getTextOrderedStructWithNameField() []*Text {
	// have alphabetical order generation
	textOrdered := []*Text{}
	for text := range stage.Texts {
		textOrdered = append(textOrdered, text)
	}
	sort.Slice(textOrdered[:], func(i, j int) bool {
		return textOrdered[i].Name < textOrdered[j].Name
	})
	return textOrdered
}

// Stage puts text to the model stage
func (text *Text) Stage() *Text {
	Stage.Texts[text] = __member
	Stage.Texts_mapString[text.Name] = text

	return text
}

// Unstage removes text off the model stage
func (text *Text) Unstage() *Text {
	delete(Stage.Texts, text)
	delete(Stage.Texts_mapString, text.Name)
	return text
}

// commit text to the back repo (if it is already staged)
func (text *Text) Commit() *Text {
	if _, ok := Stage.Texts[text]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitText(text)
		}
	}
	return text
}

// Checkout text to the back repo (if it is already staged)
func (text *Text) Checkout() *Text {
	if _, ok := Stage.Texts[text]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutText(text)
		}
	}
	return text
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of text to the model stage
func (text *Text) StageCopy() *Text {
	_text := new(Text)
	*_text = *text
	_text.Stage()
	return _text
}

// StageAndCommit appends text to the model stage and commit to the orm repo
func (text *Text) StageAndCommit() *Text {
	text.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMText(text)
	}
	return text
}

// DeleteStageAndCommit appends text to the model stage and commit to the orm repo
func (text *Text) DeleteStageAndCommit() *Text {
	text.Unstage()
	DeleteORMText(text)
	return text
}

// StageCopyAndCommit appends a copy of text to the model stage and commit to the orm repo
func (text *Text) StageCopyAndCommit() *Text {
	_text := new(Text)
	*_text = *text
	_text.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMText(text)
	}
	return _text
}

// CreateORMText enables dynamic staging of a Text instance
func CreateORMText(text *Text) {
	text.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMText(text)
	}
}

// DeleteORMText enables dynamic staging of a Text instance
func DeleteORMText(text *Text) {
	text.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMText(text)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMAnimate(Animate *Animate)
	CreateORMCircle(Circle *Circle)
	CreateORMEllipse(Ellipse *Ellipse)
	CreateORMLine(Line *Line)
	CreateORMPath(Path *Path)
	CreateORMPolygone(Polygone *Polygone)
	CreateORMPolyline(Polyline *Polyline)
	CreateORMRect(Rect *Rect)
	CreateORMSVG(SVG *SVG)
	CreateORMText(Text *Text)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMAnimate(Animate *Animate)
	DeleteORMCircle(Circle *Circle)
	DeleteORMEllipse(Ellipse *Ellipse)
	DeleteORMLine(Line *Line)
	DeleteORMPath(Path *Path)
	DeleteORMPolygone(Polygone *Polygone)
	DeleteORMPolyline(Polyline *Polyline)
	DeleteORMRect(Rect *Rect)
	DeleteORMSVG(SVG *SVG)
	DeleteORMText(Text *Text)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Animates = make(map[*Animate]struct{})
	stage.Animates_mapString = make(map[string]*Animate)

	stage.Circles = make(map[*Circle]struct{})
	stage.Circles_mapString = make(map[string]*Circle)

	stage.Ellipses = make(map[*Ellipse]struct{})
	stage.Ellipses_mapString = make(map[string]*Ellipse)

	stage.Lines = make(map[*Line]struct{})
	stage.Lines_mapString = make(map[string]*Line)

	stage.Paths = make(map[*Path]struct{})
	stage.Paths_mapString = make(map[string]*Path)

	stage.Polygones = make(map[*Polygone]struct{})
	stage.Polygones_mapString = make(map[string]*Polygone)

	stage.Polylines = make(map[*Polyline]struct{})
	stage.Polylines_mapString = make(map[string]*Polyline)

	stage.Rects = make(map[*Rect]struct{})
	stage.Rects_mapString = make(map[string]*Rect)

	stage.SVGs = make(map[*SVG]struct{})
	stage.SVGs_mapString = make(map[string]*SVG)

	stage.Texts = make(map[*Text]struct{})
	stage.Texts_mapString = make(map[string]*Text)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Animates = nil
	stage.Animates_mapString = nil

	stage.Circles = nil
	stage.Circles_mapString = nil

	stage.Ellipses = nil
	stage.Ellipses_mapString = nil

	stage.Lines = nil
	stage.Lines_mapString = nil

	stage.Paths = nil
	stage.Paths_mapString = nil

	stage.Polygones = nil
	stage.Polygones_mapString = nil

	stage.Polylines = nil
	stage.Polylines_mapString = nil

	stage.Rects = nil
	stage.Rects_mapString = nil

	stage.SVGs = nil
	stage.SVGs_mapString = nil

	stage.Texts = nil
	stage.Texts_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = "{{GeneratedFieldNameValue}}"`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Animate_Identifiers := make(map[*Animate]string)
	_ = map_Animate_Identifiers

	animateOrdered := []*Animate{}
	for animate := range stage.Animates {
		animateOrdered = append(animateOrdered, animate)
	}
	sort.Slice(animateOrdered[:], func(i, j int) bool {
		return animateOrdered[i].Name < animateOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Animate")
	for idx, animate := range animateOrdered {

		id = generatesIdentifier("Animate", idx, animate.Name)
		map_Animate_Identifiers[animate] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Animate")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", animate.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Animate %s values setup", animate.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(animate.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AttributeName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(animate.AttributeName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Values")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(animate.Values))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Dur")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(animate.Dur))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RepeatCount")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(animate.RepeatCount))
		initializerStatements += setValueField

	}

	map_Circle_Identifiers := make(map[*Circle]string)
	_ = map_Circle_Identifiers

	circleOrdered := []*Circle{}
	for circle := range stage.Circles {
		circleOrdered = append(circleOrdered, circle)
	}
	sort.Slice(circleOrdered[:], func(i, j int) bool {
		return circleOrdered[i].Name < circleOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Circle")
	for idx, circle := range circleOrdered {

		id = generatesIdentifier("Circle", idx, circle.Name)
		map_Circle_Identifiers[circle] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Circle")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", circle.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Circle %s values setup", circle.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.CX))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CY")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.CY))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Radius")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.Radius))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.Transform))
		initializerStatements += setValueField

	}

	map_Ellipse_Identifiers := make(map[*Ellipse]string)
	_ = map_Ellipse_Identifiers

	ellipseOrdered := []*Ellipse{}
	for ellipse := range stage.Ellipses {
		ellipseOrdered = append(ellipseOrdered, ellipse)
	}
	sort.Slice(ellipseOrdered[:], func(i, j int) bool {
		return ellipseOrdered[i].Name < ellipseOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Ellipse")
	for idx, ellipse := range ellipseOrdered {

		id = generatesIdentifier("Ellipse", idx, ellipse.Name)
		map_Ellipse_Identifiers[ellipse] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Ellipse")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", ellipse.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Ellipse %s values setup", ellipse.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ellipse.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ellipse.CX))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "CY")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ellipse.CY))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ellipse.RX))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RY")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ellipse.RY))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ellipse.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ellipse.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ellipse.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ellipse.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ellipse.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ellipse.Transform))
		initializerStatements += setValueField

	}

	map_Line_Identifiers := make(map[*Line]string)
	_ = map_Line_Identifiers

	lineOrdered := []*Line{}
	for line := range stage.Lines {
		lineOrdered = append(lineOrdered, line)
	}
	sort.Slice(lineOrdered[:], func(i, j int) bool {
		return lineOrdered[i].Name < lineOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Line")
	for idx, line := range lineOrdered {

		id = generatesIdentifier("Line", idx, line.Name)
		map_Line_Identifiers[line] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Line")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", line.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Line %s values setup", line.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(line.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X1")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", line.X1))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y1")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", line.Y1))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X2")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", line.X2))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y2")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", line.Y2))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(line.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", line.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(line.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", line.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(line.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(line.Transform))
		initializerStatements += setValueField

	}

	map_Path_Identifiers := make(map[*Path]string)
	_ = map_Path_Identifiers

	pathOrdered := []*Path{}
	for path := range stage.Paths {
		pathOrdered = append(pathOrdered, path)
	}
	sort.Slice(pathOrdered[:], func(i, j int) bool {
		return pathOrdered[i].Name < pathOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Path")
	for idx, path := range pathOrdered {

		id = generatesIdentifier("Path", idx, path.Name)
		map_Path_Identifiers[path] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Path")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", path.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Path %s values setup", path.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(path.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Definition")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(path.Definition))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(path.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", path.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(path.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", path.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(path.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(path.Transform))
		initializerStatements += setValueField

	}

	map_Polygone_Identifiers := make(map[*Polygone]string)
	_ = map_Polygone_Identifiers

	polygoneOrdered := []*Polygone{}
	for polygone := range stage.Polygones {
		polygoneOrdered = append(polygoneOrdered, polygone)
	}
	sort.Slice(polygoneOrdered[:], func(i, j int) bool {
		return polygoneOrdered[i].Name < polygoneOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Polygone")
	for idx, polygone := range polygoneOrdered {

		id = generatesIdentifier("Polygone", idx, polygone.Name)
		map_Polygone_Identifiers[polygone] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Polygone")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", polygone.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Polygone %s values setup", polygone.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polygone.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Points")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polygone.Points))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polygone.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", polygone.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polygone.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", polygone.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polygone.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polygone.Transform))
		initializerStatements += setValueField

	}

	map_Polyline_Identifiers := make(map[*Polyline]string)
	_ = map_Polyline_Identifiers

	polylineOrdered := []*Polyline{}
	for polyline := range stage.Polylines {
		polylineOrdered = append(polylineOrdered, polyline)
	}
	sort.Slice(polylineOrdered[:], func(i, j int) bool {
		return polylineOrdered[i].Name < polylineOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Polyline")
	for idx, polyline := range polylineOrdered {

		id = generatesIdentifier("Polyline", idx, polyline.Name)
		map_Polyline_Identifiers[polyline] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Polyline")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", polyline.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Polyline %s values setup", polyline.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polyline.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Points")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polyline.Points))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polyline.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", polyline.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polyline.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", polyline.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polyline.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(polyline.Transform))
		initializerStatements += setValueField

	}

	map_Rect_Identifiers := make(map[*Rect]string)
	_ = map_Rect_Identifiers

	rectOrdered := []*Rect{}
	for rect := range stage.Rects {
		rectOrdered = append(rectOrdered, rect)
	}
	sort.Slice(rectOrdered[:], func(i, j int) bool {
		return rectOrdered[i].Name < rectOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Rect")
	for idx, rect := range rectOrdered {

		id = generatesIdentifier("Rect", idx, rect.Name)
		map_Rect_Identifiers[rect] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Rect")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", rect.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Rect %s values setup", rect.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(rect.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.Y))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Width")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.Width))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Height")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.Height))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.RX))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(rect.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(rect.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", rect.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(rect.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(rect.Transform))
		initializerStatements += setValueField

	}

	map_SVG_Identifiers := make(map[*SVG]string)
	_ = map_SVG_Identifiers

	svgOrdered := []*SVG{}
	for svg := range stage.SVGs {
		svgOrdered = append(svgOrdered, svg)
	}
	sort.Slice(svgOrdered[:], func(i, j int) bool {
		return svgOrdered[i].Name < svgOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of SVG")
	for idx, svg := range svgOrdered {

		id = generatesIdentifier("SVG", idx, svg.Name)
		map_SVG_Identifiers[svg] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "SVG")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", svg.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// SVG %s values setup", svg.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Display")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", svg.Display))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(svg.Name))
		initializerStatements += setValueField

	}

	map_Text_Identifiers := make(map[*Text]string)
	_ = map_Text_Identifiers

	textOrdered := []*Text{}
	for text := range stage.Texts {
		textOrdered = append(textOrdered, text)
	}
	sort.Slice(textOrdered[:], func(i, j int) bool {
		return textOrdered[i].Name < textOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Text")
	for idx, text := range textOrdered {

		id = generatesIdentifier("Text", idx, text.Name)
		map_Text_Identifiers[text] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Text")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", text.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Text %s values setup", text.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(text.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", text.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", text.Y))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Content")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(text.Content))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(text.Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", text.FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(text.Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", text.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(text.StrokeDashArray))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Transform")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(text.Transform))
		initializerStatements += setValueField

	}


	// insertion initialization of objects to stage
	for idx, animate := range animateOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Animate", idx, animate.Name)
		map_Animate_Identifiers[animate] = id

		// Initialisation of values
	}

	for idx, circle := range circleOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Circle", idx, circle.Name)
		map_Circle_Identifiers[circle] = id

		// Initialisation of values
		for _, _animate := range circle.Animations {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animations")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, ellipse := range ellipseOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Ellipse", idx, ellipse.Name)
		map_Ellipse_Identifiers[ellipse] = id

		// Initialisation of values
		for _, _animate := range ellipse.Animates {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animates")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, line := range lineOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Line", idx, line.Name)
		map_Line_Identifiers[line] = id

		// Initialisation of values
		for _, _animate := range line.Animates {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animates")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, path := range pathOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Path", idx, path.Name)
		map_Path_Identifiers[path] = id

		// Initialisation of values
		for _, _animate := range path.Animates {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animates")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, polygone := range polygoneOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Polygone", idx, polygone.Name)
		map_Polygone_Identifiers[polygone] = id

		// Initialisation of values
		for _, _animate := range polygone.Animates {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animates")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, polyline := range polylineOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Polyline", idx, polyline.Name)
		map_Polyline_Identifiers[polyline] = id

		// Initialisation of values
		for _, _animate := range polyline.Animates {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animates")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, rect := range rectOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Rect", idx, rect.Name)
		map_Rect_Identifiers[rect] = id

		// Initialisation of values
		for _, _animate := range rect.Animations {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animations")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, svg := range svgOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("SVG", idx, svg.Name)
		map_SVG_Identifiers[svg] = id

		// Initialisation of values
		for _, _rect := range svg.Rects {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Rects")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Rect_Identifiers[_rect])
			pointersInitializesStatements += setPointerField
		}

		for _, _text := range svg.Texts {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Texts")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Text_Identifiers[_text])
			pointersInitializesStatements += setPointerField
		}

		for _, _circle := range svg.Circles {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Circles")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Circle_Identifiers[_circle])
			pointersInitializesStatements += setPointerField
		}

		for _, _line := range svg.Lines {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Lines")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Line_Identifiers[_line])
			pointersInitializesStatements += setPointerField
		}

		for _, _ellipse := range svg.Ellipses {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Ellipses")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Ellipse_Identifiers[_ellipse])
			pointersInitializesStatements += setPointerField
		}

		for _, _polyline := range svg.Polylines {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Polylines")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Polyline_Identifiers[_polyline])
			pointersInitializesStatements += setPointerField
		}

		for _, _polygone := range svg.Polygones {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Polygones")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Polygone_Identifiers[_polygone])
			pointersInitializesStatements += setPointerField
		}

		for _, _path := range svg.Paths {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Paths")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Path_Identifiers[_path])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, text := range textOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Text", idx, text.Name)
		map_Text_Identifiers[text] = id

		// Initialisation of values
		for _, _animate := range text.Animates {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Animates")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Animate_Identifiers[_animate])
			pointersInitializesStatements += setPointerField
		}

	}


	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}
