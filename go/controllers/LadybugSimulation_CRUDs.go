// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/ladybugsim/go/models"
	"github.com/fullstack-lang/ladybugsim/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __LadybugSimulation__dummysDeclaration__ models.LadybugSimulation
var __LadybugSimulation_time__dummyDeclaration time.Duration

// An LadybugSimulationID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLadybugSimulation updateLadybugSimulation deleteLadybugSimulation
type LadybugSimulationID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LadybugSimulationInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLadybugSimulation updateLadybugSimulation
type LadybugSimulationInput struct {
	// The LadybugSimulation to submit or modify
	// in: body
	LadybugSimulation *orm.LadybugSimulationAPI
}

// GetLadybugSimulations
//
// swagger:route GET /ladybugsimulations ladybugsimulations getLadybugSimulations
//
// Get all ladybugsimulations
//
// Responses:
//    default: genericError
//        200: ladybugsimulationDBsResponse
func GetLadybugSimulations(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybugSimulation.GetDB()
	
	// source slice
	var ladybugsimulationDBs []orm.LadybugSimulationDB
	query := db.Find(&ladybugsimulationDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	ladybugsimulationAPIs := make([]orm.LadybugSimulationAPI, 0)

	// for each ladybugsimulation, update fields from the database nullable fields
	for idx := range ladybugsimulationDBs {
		ladybugsimulationDB := &ladybugsimulationDBs[idx]
		_ = ladybugsimulationDB
		var ladybugsimulationAPI orm.LadybugSimulationAPI

		// insertion point for updating fields
		ladybugsimulationAPI.ID = ladybugsimulationDB.ID
		ladybugsimulationDB.CopyBasicFieldsToLadybugSimulation(&ladybugsimulationAPI.LadybugSimulation)
		ladybugsimulationAPI.LadybugSimulationPointersEnconding = ladybugsimulationDB.LadybugSimulationPointersEnconding
		ladybugsimulationAPIs = append(ladybugsimulationAPIs, ladybugsimulationAPI)
	}

	c.JSON(http.StatusOK, ladybugsimulationAPIs)
}

// PostLadybugSimulation
//
// swagger:route POST /ladybugsimulations ladybugsimulations postLadybugSimulation
//
// Creates a ladybugsimulation
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: ladybugsimulationDBResponse
func PostLadybugSimulation(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybugSimulation.GetDB()

	// Validate input
	var input orm.LadybugSimulationAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create ladybugsimulation
	ladybugsimulationDB := orm.LadybugSimulationDB{}
	ladybugsimulationDB.LadybugSimulationPointersEnconding = input.LadybugSimulationPointersEnconding
	ladybugsimulationDB.CopyBasicFieldsFromLadybugSimulation(&input.LadybugSimulation)

	query := db.Create(&ladybugsimulationDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, ladybugsimulationDB)
}

// GetLadybugSimulation
//
// swagger:route GET /ladybugsimulations/{ID} ladybugsimulations getLadybugSimulation
//
// Gets the details for a ladybugsimulation.
//
// Responses:
//    default: genericError
//        200: ladybugsimulationDBResponse
func GetLadybugSimulation(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybugSimulation.GetDB()

	// Get ladybugsimulationDB in DB
	var ladybugsimulationDB orm.LadybugSimulationDB
	if err := db.First(&ladybugsimulationDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var ladybugsimulationAPI orm.LadybugSimulationAPI
	ladybugsimulationAPI.ID = ladybugsimulationDB.ID
	ladybugsimulationAPI.LadybugSimulationPointersEnconding = ladybugsimulationDB.LadybugSimulationPointersEnconding
	ladybugsimulationDB.CopyBasicFieldsToLadybugSimulation(&ladybugsimulationAPI.LadybugSimulation)

	c.JSON(http.StatusOK, ladybugsimulationAPI)
}

// UpdateLadybugSimulation
//
// swagger:route PATCH /ladybugsimulations/{ID} ladybugsimulations updateLadybugSimulation
//
// Update a ladybugsimulation
//
// Responses:
//    default: genericError
//        200: ladybugsimulationDBResponse
func UpdateLadybugSimulation(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybugSimulation.GetDB()

	// Get model if exist
	var ladybugsimulationDB orm.LadybugSimulationDB

	// fetch the ladybugsimulation
	query := db.First(&ladybugsimulationDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LadybugSimulationAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	ladybugsimulationDB.CopyBasicFieldsFromLadybugSimulation(&input.LadybugSimulation)
	ladybugsimulationDB.LadybugSimulationPointersEnconding = input.LadybugSimulationPointersEnconding

	query = db.Model(&ladybugsimulationDB).Updates(ladybugsimulationDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the ladybugsimulationDB
	c.JSON(http.StatusOK, ladybugsimulationDB)
}

// DeleteLadybugSimulation
//
// swagger:route DELETE /ladybugsimulations/{ID} ladybugsimulations deleteLadybugSimulation
//
// Delete a ladybugsimulation
//
// Responses:
//    default: genericError
func DeleteLadybugSimulation(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybugSimulation.GetDB()

	// Get model if exist
	var ladybugsimulationDB orm.LadybugSimulationDB
	if err := db.First(&ladybugsimulationDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&ladybugsimulationDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
