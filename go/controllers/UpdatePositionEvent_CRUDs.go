// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/ladybugsim/go/models"
	"github.com/fullstack-lang/ladybugsim/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __UpdatePositionEvent__dummysDeclaration__ models.UpdatePositionEvent
var __UpdatePositionEvent_time__dummyDeclaration time.Duration

// An UpdatePositionEventID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getUpdatePositionEvent updateUpdatePositionEvent deleteUpdatePositionEvent
type UpdatePositionEventID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// UpdatePositionEventInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postUpdatePositionEvent updateUpdatePositionEvent
type UpdatePositionEventInput struct {
	// The UpdatePositionEvent to submit or modify
	// in: body
	UpdatePositionEvent *orm.UpdatePositionEventAPI
}

// GetUpdatePositionEvents
//
// swagger:route GET /updatepositionevents updatepositionevents getUpdatePositionEvents
//
// Get all updatepositionevents
//
// Responses:
//    default: genericError
//        200: updatepositioneventDBsResponse
func GetUpdatePositionEvents(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdatePositionEvent.GetDB()

	// source slice
	var updatepositioneventDBs []orm.UpdatePositionEventDB
	query := db.Find(&updatepositioneventDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	updatepositioneventAPIs := make([]orm.UpdatePositionEventAPI, 0)

	// for each updatepositionevent, update fields from the database nullable fields
	for idx := range updatepositioneventDBs {
		updatepositioneventDB := &updatepositioneventDBs[idx]
		_ = updatepositioneventDB
		var updatepositioneventAPI orm.UpdatePositionEventAPI

		// insertion point for updating fields
		updatepositioneventAPI.ID = updatepositioneventDB.ID
		updatepositioneventDB.CopyBasicFieldsToUpdatePositionEvent(&updatepositioneventAPI.UpdatePositionEvent)
		updatepositioneventAPI.UpdatePositionEventPointersEnconding = updatepositioneventDB.UpdatePositionEventPointersEnconding
		updatepositioneventAPIs = append(updatepositioneventAPIs, updatepositioneventAPI)
	}

	c.JSON(http.StatusOK, updatepositioneventAPIs)
}

// PostUpdatePositionEvent
//
// swagger:route POST /updatepositionevents updatepositionevents postUpdatePositionEvent
//
// Creates a updatepositionevent
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: updatepositioneventDBResponse
func PostUpdatePositionEvent(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdatePositionEvent.GetDB()

	// Validate input
	var input orm.UpdatePositionEventAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create updatepositionevent
	updatepositioneventDB := orm.UpdatePositionEventDB{}
	updatepositioneventDB.UpdatePositionEventPointersEnconding = input.UpdatePositionEventPointersEnconding
	updatepositioneventDB.CopyBasicFieldsFromUpdatePositionEvent(&input.UpdatePositionEvent)

	query := db.Create(&updatepositioneventDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, updatepositioneventDB)
}

// GetUpdatePositionEvent
//
// swagger:route GET /updatepositionevents/{ID} updatepositionevents getUpdatePositionEvent
//
// Gets the details for a updatepositionevent.
//
// Responses:
//    default: genericError
//        200: updatepositioneventDBResponse
func GetUpdatePositionEvent(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdatePositionEvent.GetDB()

	// Get updatepositioneventDB in DB
	var updatepositioneventDB orm.UpdatePositionEventDB
	if err := db.First(&updatepositioneventDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var updatepositioneventAPI orm.UpdatePositionEventAPI
	updatepositioneventAPI.ID = updatepositioneventDB.ID
	updatepositioneventAPI.UpdatePositionEventPointersEnconding = updatepositioneventDB.UpdatePositionEventPointersEnconding
	updatepositioneventDB.CopyBasicFieldsToUpdatePositionEvent(&updatepositioneventAPI.UpdatePositionEvent)

	c.JSON(http.StatusOK, updatepositioneventAPI)
}

// UpdateUpdatePositionEvent
//
// swagger:route PATCH /updatepositionevents/{ID} updatepositionevents updateUpdatePositionEvent
//
// Update a updatepositionevent
//
// Responses:
//    default: genericError
//        200: updatepositioneventDBResponse
func UpdateUpdatePositionEvent(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdatePositionEvent.GetDB()

	// Get model if exist
	var updatepositioneventDB orm.UpdatePositionEventDB

	// fetch the updatepositionevent
	query := db.First(&updatepositioneventDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.UpdatePositionEventAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	updatepositioneventDB.CopyBasicFieldsFromUpdatePositionEvent(&input.UpdatePositionEvent)
	updatepositioneventDB.UpdatePositionEventPointersEnconding = input.UpdatePositionEventPointersEnconding

	query = db.Model(&updatepositioneventDB).Updates(updatepositioneventDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the updatepositioneventDB
	c.JSON(http.StatusOK, updatepositioneventDB)
}

// DeleteUpdatePositionEvent
//
// swagger:route DELETE /updatepositionevents/{ID} updatepositionevents deleteUpdatePositionEvent
//
// Delete a updatepositionevent
//
// Responses:
//    default: genericError
func DeleteUpdatePositionEvent(c *gin.Context) {
	db := orm.BackRepo.BackRepoUpdatePositionEvent.GetDB()

	// Get model if exist
	var updatepositioneventDB orm.UpdatePositionEventDB
	if err := db.First(&updatepositioneventDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&updatepositioneventDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
