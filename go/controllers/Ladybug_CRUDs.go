// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/ladybugsim/go/models"
	"github.com/fullstack-lang/ladybugsim/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Ladybug__dummysDeclaration__ models.Ladybug
var __Ladybug_time__dummyDeclaration time.Duration

// An LadybugID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLadybug updateLadybug deleteLadybug
type LadybugID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LadybugInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLadybug updateLadybug
type LadybugInput struct {
	// The Ladybug to submit or modify
	// in: body
	Ladybug *orm.LadybugAPI
}

// GetLadybugs
//
// swagger:route GET /ladybugs ladybugs getLadybugs
//
// Get all ladybugs
//
// Responses:
//    default: genericError
//        200: ladybugDBsResponse
func GetLadybugs(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybug.GetDB()

	// source slice
	var ladybugDBs []orm.LadybugDB
	query := db.Find(&ladybugDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	ladybugAPIs := make([]orm.LadybugAPI, 0)

	// for each ladybug, update fields from the database nullable fields
	for idx := range ladybugDBs {
		ladybugDB := &ladybugDBs[idx]
		_ = ladybugDB
		var ladybugAPI orm.LadybugAPI

		// insertion point for updating fields
		ladybugAPI.ID = ladybugDB.ID
		ladybugDB.CopyBasicFieldsToLadybug(&ladybugAPI.Ladybug)
		ladybugAPI.LadybugPointersEnconding = ladybugDB.LadybugPointersEnconding
		ladybugAPIs = append(ladybugAPIs, ladybugAPI)
	}

	c.JSON(http.StatusOK, ladybugAPIs)
}

// PostLadybug
//
// swagger:route POST /ladybugs ladybugs postLadybug
//
// Creates a ladybug
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: ladybugDBResponse
func PostLadybug(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybug.GetDB()

	// Validate input
	var input orm.LadybugAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create ladybug
	ladybugDB := orm.LadybugDB{}
	ladybugDB.LadybugPointersEnconding = input.LadybugPointersEnconding
	ladybugDB.CopyBasicFieldsFromLadybug(&input.Ladybug)

	query := db.Create(&ladybugDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, ladybugDB)
}

// GetLadybug
//
// swagger:route GET /ladybugs/{ID} ladybugs getLadybug
//
// Gets the details for a ladybug.
//
// Responses:
//    default: genericError
//        200: ladybugDBResponse
func GetLadybug(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybug.GetDB()

	// Get ladybugDB in DB
	var ladybugDB orm.LadybugDB
	if err := db.First(&ladybugDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var ladybugAPI orm.LadybugAPI
	ladybugAPI.ID = ladybugDB.ID
	ladybugAPI.LadybugPointersEnconding = ladybugDB.LadybugPointersEnconding
	ladybugDB.CopyBasicFieldsToLadybug(&ladybugAPI.Ladybug)

	c.JSON(http.StatusOK, ladybugAPI)
}

// UpdateLadybug
//
// swagger:route PATCH /ladybugs/{ID} ladybugs updateLadybug
//
// Update a ladybug
//
// Responses:
//    default: genericError
//        200: ladybugDBResponse
func UpdateLadybug(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybug.GetDB()

	// Get model if exist
	var ladybugDB orm.LadybugDB

	// fetch the ladybug
	query := db.First(&ladybugDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LadybugAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	ladybugDB.CopyBasicFieldsFromLadybug(&input.Ladybug)
	ladybugDB.LadybugPointersEnconding = input.LadybugPointersEnconding

	query = db.Model(&ladybugDB).Updates(ladybugDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the ladybugDB
	c.JSON(http.StatusOK, ladybugDB)
}

// DeleteLadybug
//
// swagger:route DELETE /ladybugs/{ID} ladybugs deleteLadybug
//
// Delete a ladybug
//
// Responses:
//    default: genericError
func DeleteLadybug(c *gin.Context) {
	db := orm.BackRepo.BackRepoLadybug.GetDB()

	// Get model if exist
	var ladybugDB orm.LadybugDB
	if err := db.First(&ladybugDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&ladybugDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
