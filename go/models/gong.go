// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Ladybugs           map[*Ladybug]struct{}
	Ladybugs_mapString map[string]*Ladybug

	LadybugSimulations           map[*LadybugSimulation]struct{}
	LadybugSimulations_mapString map[string]*LadybugSimulation

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitLadybug(ladybug *Ladybug)
	CheckoutLadybug(ladybug *Ladybug)
	CommitLadybugSimulation(ladybugsimulation *LadybugSimulation)
	CheckoutLadybugSimulation(ladybugsimulation *LadybugSimulation)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Ladybugs:           make(map[*Ladybug]struct{}, 0),
	Ladybugs_mapString: make(map[string]*Ladybug, 0),

	LadybugSimulations:           make(map[*LadybugSimulation]struct{}, 0),
	LadybugSimulations_mapString: make(map[string]*LadybugSimulation, 0),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getLadybugOrderedStructWithNameField() []*Ladybug {
	// have alphabetical order generation
	ladybugOrdered := []*Ladybug{}
	for ladybug := range stage.Ladybugs {
		ladybugOrdered = append(ladybugOrdered, ladybug)
	}
	sort.Slice(ladybugOrdered[:], func(i, j int) bool {
		return ladybugOrdered[i].Name < ladybugOrdered[j].Name
	})
	return ladybugOrdered
}

// Stage puts ladybug to the model stage
func (ladybug *Ladybug) Stage() *Ladybug {
	Stage.Ladybugs[ladybug] = __member
	Stage.Ladybugs_mapString[ladybug.Name] = ladybug

	return ladybug
}

// Unstage removes ladybug off the model stage
func (ladybug *Ladybug) Unstage() *Ladybug {
	delete(Stage.Ladybugs, ladybug)
	delete(Stage.Ladybugs_mapString, ladybug.Name)
	return ladybug
}

// commit ladybug to the back repo (if it is already staged)
func (ladybug *Ladybug) Commit() *Ladybug {
	if _, ok := Stage.Ladybugs[ladybug]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLadybug(ladybug)
		}
	}
	return ladybug
}

// Checkout ladybug to the back repo (if it is already staged)
func (ladybug *Ladybug) Checkout() *Ladybug {
	if _, ok := Stage.Ladybugs[ladybug]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLadybug(ladybug)
		}
	}
	return ladybug
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ladybug to the model stage
func (ladybug *Ladybug) StageCopy() *Ladybug {
	_ladybug := new(Ladybug)
	*_ladybug = *ladybug
	_ladybug.Stage()
	return _ladybug
}

// StageAndCommit appends ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) StageAndCommit() *Ladybug {
	ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
	return ladybug
}

// DeleteStageAndCommit appends ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) DeleteStageAndCommit() *Ladybug {
	ladybug.Unstage()
	DeleteORMLadybug(ladybug)
	return ladybug
}

// StageCopyAndCommit appends a copy of ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) StageCopyAndCommit() *Ladybug {
	_ladybug := new(Ladybug)
	*_ladybug = *ladybug
	_ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
	return _ladybug
}

// CreateORMLadybug enables dynamic staging of a Ladybug instance
func CreateORMLadybug(ladybug *Ladybug) {
	ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
}

// DeleteORMLadybug enables dynamic staging of a Ladybug instance
func DeleteORMLadybug(ladybug *Ladybug) {
	ladybug.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLadybug(ladybug)
	}
}

func (stage *StageStruct) getLadybugSimulationOrderedStructWithNameField() []*LadybugSimulation {
	// have alphabetical order generation
	ladybugsimulationOrdered := []*LadybugSimulation{}
	for ladybugsimulation := range stage.LadybugSimulations {
		ladybugsimulationOrdered = append(ladybugsimulationOrdered, ladybugsimulation)
	}
	sort.Slice(ladybugsimulationOrdered[:], func(i, j int) bool {
		return ladybugsimulationOrdered[i].Name < ladybugsimulationOrdered[j].Name
	})
	return ladybugsimulationOrdered
}

// Stage puts ladybugsimulation to the model stage
func (ladybugsimulation *LadybugSimulation) Stage() *LadybugSimulation {
	Stage.LadybugSimulations[ladybugsimulation] = __member
	Stage.LadybugSimulations_mapString[ladybugsimulation.Name] = ladybugsimulation

	return ladybugsimulation
}

// Unstage removes ladybugsimulation off the model stage
func (ladybugsimulation *LadybugSimulation) Unstage() *LadybugSimulation {
	delete(Stage.LadybugSimulations, ladybugsimulation)
	delete(Stage.LadybugSimulations_mapString, ladybugsimulation.Name)
	return ladybugsimulation
}

// commit ladybugsimulation to the back repo (if it is already staged)
func (ladybugsimulation *LadybugSimulation) Commit() *LadybugSimulation {
	if _, ok := Stage.LadybugSimulations[ladybugsimulation]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLadybugSimulation(ladybugsimulation)
		}
	}
	return ladybugsimulation
}

// Checkout ladybugsimulation to the back repo (if it is already staged)
func (ladybugsimulation *LadybugSimulation) Checkout() *LadybugSimulation {
	if _, ok := Stage.LadybugSimulations[ladybugsimulation]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLadybugSimulation(ladybugsimulation)
		}
	}
	return ladybugsimulation
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ladybugsimulation to the model stage
func (ladybugsimulation *LadybugSimulation) StageCopy() *LadybugSimulation {
	_ladybugsimulation := new(LadybugSimulation)
	*_ladybugsimulation = *ladybugsimulation
	_ladybugsimulation.Stage()
	return _ladybugsimulation
}

// StageAndCommit appends ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) StageAndCommit() *LadybugSimulation {
	ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
	return ladybugsimulation
}

// DeleteStageAndCommit appends ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) DeleteStageAndCommit() *LadybugSimulation {
	ladybugsimulation.Unstage()
	DeleteORMLadybugSimulation(ladybugsimulation)
	return ladybugsimulation
}

// StageCopyAndCommit appends a copy of ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) StageCopyAndCommit() *LadybugSimulation {
	_ladybugsimulation := new(LadybugSimulation)
	*_ladybugsimulation = *ladybugsimulation
	_ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
	return _ladybugsimulation
}

// CreateORMLadybugSimulation enables dynamic staging of a LadybugSimulation instance
func CreateORMLadybugSimulation(ladybugsimulation *LadybugSimulation) {
	ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
}

// DeleteORMLadybugSimulation enables dynamic staging of a LadybugSimulation instance
func DeleteORMLadybugSimulation(ladybugsimulation *LadybugSimulation) {
	ladybugsimulation.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLadybugSimulation(ladybugsimulation)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMLadybug(Ladybug *Ladybug)
	CreateORMLadybugSimulation(LadybugSimulation *LadybugSimulation)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMLadybug(Ladybug *Ladybug)
	DeleteORMLadybugSimulation(LadybugSimulation *LadybugSimulation)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Ladybugs = make(map[*Ladybug]struct{}, 0)
	stage.Ladybugs_mapString = make(map[string]*Ladybug, 0)

	stage.LadybugSimulations = make(map[*LadybugSimulation]struct{}, 0)
	stage.LadybugSimulations_mapString = make(map[string]*LadybugSimulation, 0)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Ladybugs = nil
	stage.Ladybugs_mapString = nil

	stage.LadybugSimulations = nil
	stage.LadybugSimulations_mapString = nil

}
