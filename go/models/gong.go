// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Ladybugs           map[*Ladybug]struct{}
	Ladybugs_mapString map[string]*Ladybug

	LadybugSimulations           map[*LadybugSimulation]struct{}
	LadybugSimulations_mapString map[string]*LadybugSimulation

	UpdatePositionEvents           map[*UpdatePositionEvent]struct{}
	UpdatePositionEvents_mapString map[string]*UpdatePositionEvent

	UpdateSpeedEvents           map[*UpdateSpeedEvent]struct{}
	UpdateSpeedEvents_mapString map[string]*UpdateSpeedEvent

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitLadybug(ladybug *Ladybug)
	CheckoutLadybug(ladybug *Ladybug)
	CommitLadybugSimulation(ladybugsimulation *LadybugSimulation)
	CheckoutLadybugSimulation(ladybugsimulation *LadybugSimulation)
	CommitUpdatePositionEvent(updatepositionevent *UpdatePositionEvent)
	CheckoutUpdatePositionEvent(updatepositionevent *UpdatePositionEvent)
	CommitUpdateSpeedEvent(updatespeedevent *UpdateSpeedEvent)
	CheckoutUpdateSpeedEvent(updatespeedevent *UpdateSpeedEvent)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Ladybugs:           make(map[*Ladybug]struct{}),
	Ladybugs_mapString: make(map[string]*Ladybug),

	LadybugSimulations:           make(map[*LadybugSimulation]struct{}),
	LadybugSimulations_mapString: make(map[string]*LadybugSimulation),

	UpdatePositionEvents:           make(map[*UpdatePositionEvent]struct{}),
	UpdatePositionEvents_mapString: make(map[string]*UpdatePositionEvent),

	UpdateSpeedEvents:           make(map[*UpdateSpeedEvent]struct{}),
	UpdateSpeedEvents_mapString: make(map[string]*UpdateSpeedEvent),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Ladybug"] = len(stage.Ladybugs)
	stage.Map_GongStructName_InstancesNb["LadybugSimulation"] = len(stage.LadybugSimulations)
	stage.Map_GongStructName_InstancesNb["UpdatePositionEvent"] = len(stage.UpdatePositionEvents)
	stage.Map_GongStructName_InstancesNb["UpdateSpeedEvent"] = len(stage.UpdateSpeedEvents)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getLadybugOrderedStructWithNameField() []*Ladybug {
	// have alphabetical order generation
	ladybugOrdered := []*Ladybug{}
	for ladybug := range stage.Ladybugs {
		ladybugOrdered = append(ladybugOrdered, ladybug)
	}
	sort.Slice(ladybugOrdered[:], func(i, j int) bool {
		return ladybugOrdered[i].Name < ladybugOrdered[j].Name
	})
	return ladybugOrdered
}

// Stage puts ladybug to the model stage
func (ladybug *Ladybug) Stage() *Ladybug {
	Stage.Ladybugs[ladybug] = __member
	Stage.Ladybugs_mapString[ladybug.Name] = ladybug

	return ladybug
}

// Unstage removes ladybug off the model stage
func (ladybug *Ladybug) Unstage() *Ladybug {
	delete(Stage.Ladybugs, ladybug)
	delete(Stage.Ladybugs_mapString, ladybug.Name)
	return ladybug
}

// commit ladybug to the back repo (if it is already staged)
func (ladybug *Ladybug) Commit() *Ladybug {
	if _, ok := Stage.Ladybugs[ladybug]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLadybug(ladybug)
		}
	}
	return ladybug
}

// Checkout ladybug to the back repo (if it is already staged)
func (ladybug *Ladybug) Checkout() *Ladybug {
	if _, ok := Stage.Ladybugs[ladybug]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLadybug(ladybug)
		}
	}
	return ladybug
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ladybug to the model stage
func (ladybug *Ladybug) StageCopy() *Ladybug {
	_ladybug := new(Ladybug)
	*_ladybug = *ladybug
	_ladybug.Stage()
	return _ladybug
}

// StageAndCommit appends ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) StageAndCommit() *Ladybug {
	ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
	return ladybug
}

// DeleteStageAndCommit appends ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) DeleteStageAndCommit() *Ladybug {
	ladybug.Unstage()
	DeleteORMLadybug(ladybug)
	return ladybug
}

// StageCopyAndCommit appends a copy of ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) StageCopyAndCommit() *Ladybug {
	_ladybug := new(Ladybug)
	*_ladybug = *ladybug
	_ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
	return _ladybug
}

// CreateORMLadybug enables dynamic staging of a Ladybug instance
func CreateORMLadybug(ladybug *Ladybug) {
	ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
}

// DeleteORMLadybug enables dynamic staging of a Ladybug instance
func DeleteORMLadybug(ladybug *Ladybug) {
	ladybug.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLadybug(ladybug)
	}
}

func (stage *StageStruct) getLadybugSimulationOrderedStructWithNameField() []*LadybugSimulation {
	// have alphabetical order generation
	ladybugsimulationOrdered := []*LadybugSimulation{}
	for ladybugsimulation := range stage.LadybugSimulations {
		ladybugsimulationOrdered = append(ladybugsimulationOrdered, ladybugsimulation)
	}
	sort.Slice(ladybugsimulationOrdered[:], func(i, j int) bool {
		return ladybugsimulationOrdered[i].Name < ladybugsimulationOrdered[j].Name
	})
	return ladybugsimulationOrdered
}

// Stage puts ladybugsimulation to the model stage
func (ladybugsimulation *LadybugSimulation) Stage() *LadybugSimulation {
	Stage.LadybugSimulations[ladybugsimulation] = __member
	Stage.LadybugSimulations_mapString[ladybugsimulation.Name] = ladybugsimulation

	return ladybugsimulation
}

// Unstage removes ladybugsimulation off the model stage
func (ladybugsimulation *LadybugSimulation) Unstage() *LadybugSimulation {
	delete(Stage.LadybugSimulations, ladybugsimulation)
	delete(Stage.LadybugSimulations_mapString, ladybugsimulation.Name)
	return ladybugsimulation
}

// commit ladybugsimulation to the back repo (if it is already staged)
func (ladybugsimulation *LadybugSimulation) Commit() *LadybugSimulation {
	if _, ok := Stage.LadybugSimulations[ladybugsimulation]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLadybugSimulation(ladybugsimulation)
		}
	}
	return ladybugsimulation
}

// Checkout ladybugsimulation to the back repo (if it is already staged)
func (ladybugsimulation *LadybugSimulation) Checkout() *LadybugSimulation {
	if _, ok := Stage.LadybugSimulations[ladybugsimulation]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLadybugSimulation(ladybugsimulation)
		}
	}
	return ladybugsimulation
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ladybugsimulation to the model stage
func (ladybugsimulation *LadybugSimulation) StageCopy() *LadybugSimulation {
	_ladybugsimulation := new(LadybugSimulation)
	*_ladybugsimulation = *ladybugsimulation
	_ladybugsimulation.Stage()
	return _ladybugsimulation
}

// StageAndCommit appends ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) StageAndCommit() *LadybugSimulation {
	ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
	return ladybugsimulation
}

// DeleteStageAndCommit appends ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) DeleteStageAndCommit() *LadybugSimulation {
	ladybugsimulation.Unstage()
	DeleteORMLadybugSimulation(ladybugsimulation)
	return ladybugsimulation
}

// StageCopyAndCommit appends a copy of ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) StageCopyAndCommit() *LadybugSimulation {
	_ladybugsimulation := new(LadybugSimulation)
	*_ladybugsimulation = *ladybugsimulation
	_ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
	return _ladybugsimulation
}

// CreateORMLadybugSimulation enables dynamic staging of a LadybugSimulation instance
func CreateORMLadybugSimulation(ladybugsimulation *LadybugSimulation) {
	ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
}

// DeleteORMLadybugSimulation enables dynamic staging of a LadybugSimulation instance
func DeleteORMLadybugSimulation(ladybugsimulation *LadybugSimulation) {
	ladybugsimulation.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLadybugSimulation(ladybugsimulation)
	}
}

func (stage *StageStruct) getUpdatePositionEventOrderedStructWithNameField() []*UpdatePositionEvent {
	// have alphabetical order generation
	updatepositioneventOrdered := []*UpdatePositionEvent{}
	for updatepositionevent := range stage.UpdatePositionEvents {
		updatepositioneventOrdered = append(updatepositioneventOrdered, updatepositionevent)
	}
	sort.Slice(updatepositioneventOrdered[:], func(i, j int) bool {
		return updatepositioneventOrdered[i].Name < updatepositioneventOrdered[j].Name
	})
	return updatepositioneventOrdered
}

// Stage puts updatepositionevent to the model stage
func (updatepositionevent *UpdatePositionEvent) Stage() *UpdatePositionEvent {
	Stage.UpdatePositionEvents[updatepositionevent] = __member
	Stage.UpdatePositionEvents_mapString[updatepositionevent.Name] = updatepositionevent

	return updatepositionevent
}

// Unstage removes updatepositionevent off the model stage
func (updatepositionevent *UpdatePositionEvent) Unstage() *UpdatePositionEvent {
	delete(Stage.UpdatePositionEvents, updatepositionevent)
	delete(Stage.UpdatePositionEvents_mapString, updatepositionevent.Name)
	return updatepositionevent
}

// commit updatepositionevent to the back repo (if it is already staged)
func (updatepositionevent *UpdatePositionEvent) Commit() *UpdatePositionEvent {
	if _, ok := Stage.UpdatePositionEvents[updatepositionevent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUpdatePositionEvent(updatepositionevent)
		}
	}
	return updatepositionevent
}

// Checkout updatepositionevent to the back repo (if it is already staged)
func (updatepositionevent *UpdatePositionEvent) Checkout() *UpdatePositionEvent {
	if _, ok := Stage.UpdatePositionEvents[updatepositionevent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUpdatePositionEvent(updatepositionevent)
		}
	}
	return updatepositionevent
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of updatepositionevent to the model stage
func (updatepositionevent *UpdatePositionEvent) StageCopy() *UpdatePositionEvent {
	_updatepositionevent := new(UpdatePositionEvent)
	*_updatepositionevent = *updatepositionevent
	_updatepositionevent.Stage()
	return _updatepositionevent
}

// StageAndCommit appends updatepositionevent to the model stage and commit to the orm repo
func (updatepositionevent *UpdatePositionEvent) StageAndCommit() *UpdatePositionEvent {
	updatepositionevent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdatePositionEvent(updatepositionevent)
	}
	return updatepositionevent
}

// DeleteStageAndCommit appends updatepositionevent to the model stage and commit to the orm repo
func (updatepositionevent *UpdatePositionEvent) DeleteStageAndCommit() *UpdatePositionEvent {
	updatepositionevent.Unstage()
	DeleteORMUpdatePositionEvent(updatepositionevent)
	return updatepositionevent
}

// StageCopyAndCommit appends a copy of updatepositionevent to the model stage and commit to the orm repo
func (updatepositionevent *UpdatePositionEvent) StageCopyAndCommit() *UpdatePositionEvent {
	_updatepositionevent := new(UpdatePositionEvent)
	*_updatepositionevent = *updatepositionevent
	_updatepositionevent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdatePositionEvent(updatepositionevent)
	}
	return _updatepositionevent
}

// CreateORMUpdatePositionEvent enables dynamic staging of a UpdatePositionEvent instance
func CreateORMUpdatePositionEvent(updatepositionevent *UpdatePositionEvent) {
	updatepositionevent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdatePositionEvent(updatepositionevent)
	}
}

// DeleteORMUpdatePositionEvent enables dynamic staging of a UpdatePositionEvent instance
func DeleteORMUpdatePositionEvent(updatepositionevent *UpdatePositionEvent) {
	updatepositionevent.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUpdatePositionEvent(updatepositionevent)
	}
}

func (stage *StageStruct) getUpdateSpeedEventOrderedStructWithNameField() []*UpdateSpeedEvent {
	// have alphabetical order generation
	updatespeedeventOrdered := []*UpdateSpeedEvent{}
	for updatespeedevent := range stage.UpdateSpeedEvents {
		updatespeedeventOrdered = append(updatespeedeventOrdered, updatespeedevent)
	}
	sort.Slice(updatespeedeventOrdered[:], func(i, j int) bool {
		return updatespeedeventOrdered[i].Name < updatespeedeventOrdered[j].Name
	})
	return updatespeedeventOrdered
}

// Stage puts updatespeedevent to the model stage
func (updatespeedevent *UpdateSpeedEvent) Stage() *UpdateSpeedEvent {
	Stage.UpdateSpeedEvents[updatespeedevent] = __member
	Stage.UpdateSpeedEvents_mapString[updatespeedevent.Name] = updatespeedevent

	return updatespeedevent
}

// Unstage removes updatespeedevent off the model stage
func (updatespeedevent *UpdateSpeedEvent) Unstage() *UpdateSpeedEvent {
	delete(Stage.UpdateSpeedEvents, updatespeedevent)
	delete(Stage.UpdateSpeedEvents_mapString, updatespeedevent.Name)
	return updatespeedevent
}

// commit updatespeedevent to the back repo (if it is already staged)
func (updatespeedevent *UpdateSpeedEvent) Commit() *UpdateSpeedEvent {
	if _, ok := Stage.UpdateSpeedEvents[updatespeedevent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUpdateSpeedEvent(updatespeedevent)
		}
	}
	return updatespeedevent
}

// Checkout updatespeedevent to the back repo (if it is already staged)
func (updatespeedevent *UpdateSpeedEvent) Checkout() *UpdateSpeedEvent {
	if _, ok := Stage.UpdateSpeedEvents[updatespeedevent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUpdateSpeedEvent(updatespeedevent)
		}
	}
	return updatespeedevent
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of updatespeedevent to the model stage
func (updatespeedevent *UpdateSpeedEvent) StageCopy() *UpdateSpeedEvent {
	_updatespeedevent := new(UpdateSpeedEvent)
	*_updatespeedevent = *updatespeedevent
	_updatespeedevent.Stage()
	return _updatespeedevent
}

// StageAndCommit appends updatespeedevent to the model stage and commit to the orm repo
func (updatespeedevent *UpdateSpeedEvent) StageAndCommit() *UpdateSpeedEvent {
	updatespeedevent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateSpeedEvent(updatespeedevent)
	}
	return updatespeedevent
}

// DeleteStageAndCommit appends updatespeedevent to the model stage and commit to the orm repo
func (updatespeedevent *UpdateSpeedEvent) DeleteStageAndCommit() *UpdateSpeedEvent {
	updatespeedevent.Unstage()
	DeleteORMUpdateSpeedEvent(updatespeedevent)
	return updatespeedevent
}

// StageCopyAndCommit appends a copy of updatespeedevent to the model stage and commit to the orm repo
func (updatespeedevent *UpdateSpeedEvent) StageCopyAndCommit() *UpdateSpeedEvent {
	_updatespeedevent := new(UpdateSpeedEvent)
	*_updatespeedevent = *updatespeedevent
	_updatespeedevent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateSpeedEvent(updatespeedevent)
	}
	return _updatespeedevent
}

// CreateORMUpdateSpeedEvent enables dynamic staging of a UpdateSpeedEvent instance
func CreateORMUpdateSpeedEvent(updatespeedevent *UpdateSpeedEvent) {
	updatespeedevent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUpdateSpeedEvent(updatespeedevent)
	}
}

// DeleteORMUpdateSpeedEvent enables dynamic staging of a UpdateSpeedEvent instance
func DeleteORMUpdateSpeedEvent(updatespeedevent *UpdateSpeedEvent) {
	updatespeedevent.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUpdateSpeedEvent(updatespeedevent)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMLadybug(Ladybug *Ladybug)
	CreateORMLadybugSimulation(LadybugSimulation *LadybugSimulation)
	CreateORMUpdatePositionEvent(UpdatePositionEvent *UpdatePositionEvent)
	CreateORMUpdateSpeedEvent(UpdateSpeedEvent *UpdateSpeedEvent)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMLadybug(Ladybug *Ladybug)
	DeleteORMLadybugSimulation(LadybugSimulation *LadybugSimulation)
	DeleteORMUpdatePositionEvent(UpdatePositionEvent *UpdatePositionEvent)
	DeleteORMUpdateSpeedEvent(UpdateSpeedEvent *UpdateSpeedEvent)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Ladybugs = make(map[*Ladybug]struct{})
	stage.Ladybugs_mapString = make(map[string]*Ladybug)

	stage.LadybugSimulations = make(map[*LadybugSimulation]struct{})
	stage.LadybugSimulations_mapString = make(map[string]*LadybugSimulation)

	stage.UpdatePositionEvents = make(map[*UpdatePositionEvent]struct{})
	stage.UpdatePositionEvents_mapString = make(map[string]*UpdatePositionEvent)

	stage.UpdateSpeedEvents = make(map[*UpdateSpeedEvent]struct{})
	stage.UpdateSpeedEvents_mapString = make(map[string]*UpdateSpeedEvent)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Ladybugs = nil
	stage.Ladybugs_mapString = nil

	stage.LadybugSimulations = nil
	stage.LadybugSimulations_mapString = nil

	stage.UpdatePositionEvents = nil
	stage.UpdatePositionEvents_mapString = nil

	stage.UpdateSpeedEvents = nil
	stage.UpdateSpeedEvents_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Ladybug_Identifiers := make(map[*Ladybug]string)
	_ = map_Ladybug_Identifiers

	ladybugOrdered := []*Ladybug{}
	for ladybug := range stage.Ladybugs {
		ladybugOrdered = append(ladybugOrdered, ladybug)
	}
	sort.Slice(ladybugOrdered[:], func(i, j int) bool {
		return ladybugOrdered[i].Name < ladybugOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Ladybug")
	for idx, ladybug := range ladybugOrdered {

		id = generatesIdentifier("Ladybug", idx, ladybug.Name)
		map_Ladybug_Identifiers[ladybug] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Ladybug")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", ladybug.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Ladybug %s values setup", ladybug.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ladybug.TechName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ladybug.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Id")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybug.Id))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Position")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybug.Position))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybug.Speed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LadybugStatus")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ladybug.LadybugStatus))
		initializerStatements += setValueField

	}

	map_LadybugSimulation_Identifiers := make(map[*LadybugSimulation]string)
	_ = map_LadybugSimulation_Identifiers

	ladybugsimulationOrdered := []*LadybugSimulation{}
	for ladybugsimulation := range stage.LadybugSimulations {
		ladybugsimulationOrdered = append(ladybugsimulationOrdered, ladybugsimulation)
	}
	sort.Slice(ladybugsimulationOrdered[:], func(i, j int) bool {
		return ladybugsimulationOrdered[i].Name < ladybugsimulationOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of LadybugSimulation")
	for idx, ladybugsimulation := range ladybugsimulationOrdered {

		id = generatesIdentifier("LadybugSimulation", idx, ladybugsimulation.Name)
		map_LadybugSimulation_Identifiers[ladybugsimulation] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "LadybugSimulation")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", ladybugsimulation.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// LadybugSimulation %s values setup", ladybugsimulation.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ladybugsimulation.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "EventNb")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.EventNb))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbOfCollision")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.NbOfCollision))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LadybugRadius")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.LadybugRadius))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AbsoluteSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.AbsoluteSpeed))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SimulationStep")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.SimulationStep))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MaxDistanceInOneStep")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.MaxDistanceInOneStep))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbLadybugs")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.NbLadybugs))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbLadybugsOnTheGround")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.NbLadybugsOnTheGround))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LeftRelayInitialPosX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.LeftRelayInitialPosX))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RightRelayInitialPosX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.RightRelayInitialPosX))
		initializerStatements += setValueField

	}

	map_UpdatePositionEvent_Identifiers := make(map[*UpdatePositionEvent]string)
	_ = map_UpdatePositionEvent_Identifiers

	updatepositioneventOrdered := []*UpdatePositionEvent{}
	for updatepositionevent := range stage.UpdatePositionEvents {
		updatepositioneventOrdered = append(updatepositioneventOrdered, updatepositionevent)
	}
	sort.Slice(updatepositioneventOrdered[:], func(i, j int) bool {
		return updatepositioneventOrdered[i].Name < updatepositioneventOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of UpdatePositionEvent")
	for idx, updatepositionevent := range updatepositioneventOrdered {

		id = generatesIdentifier("UpdatePositionEvent", idx, updatepositionevent.Name)
		map_UpdatePositionEvent_Identifiers[updatepositionevent] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "UpdatePositionEvent")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", updatepositionevent.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// UpdatePositionEvent %s values setup", updatepositionevent.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(updatepositionevent.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", updatepositionevent.Duration))
		initializerStatements += setValueField

	}

	map_UpdateSpeedEvent_Identifiers := make(map[*UpdateSpeedEvent]string)
	_ = map_UpdateSpeedEvent_Identifiers

	updatespeedeventOrdered := []*UpdateSpeedEvent{}
	for updatespeedevent := range stage.UpdateSpeedEvents {
		updatespeedeventOrdered = append(updatespeedeventOrdered, updatespeedevent)
	}
	sort.Slice(updatespeedeventOrdered[:], func(i, j int) bool {
		return updatespeedeventOrdered[i].Name < updatespeedeventOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of UpdateSpeedEvent")
	for idx, updatespeedevent := range updatespeedeventOrdered {

		id = generatesIdentifier("UpdateSpeedEvent", idx, updatespeedevent.Name)
		map_UpdateSpeedEvent_Identifiers[updatespeedevent] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "UpdateSpeedEvent")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", updatespeedevent.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// UpdateSpeedEvent %s values setup", updatespeedevent.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(updatespeedevent.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", updatespeedevent.Duration))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, ladybug := range ladybugOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Ladybug", idx, ladybug.Name)
		map_Ladybug_Identifiers[ladybug] = id

		// Initialisation of values
	}

	for idx, ladybugsimulation := range ladybugsimulationOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("LadybugSimulation", idx, ladybugsimulation.Name)
		map_LadybugSimulation_Identifiers[ladybugsimulation] = id

		// Initialisation of values
		for _, _ladybug := range ladybugsimulation.Ladybugs {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Ladybugs")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Ladybug_Identifiers[_ladybug])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, updatepositionevent := range updatepositioneventOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("UpdatePositionEvent", idx, updatepositionevent.Name)
		map_UpdatePositionEvent_Identifiers[updatepositionevent] = id

		// Initialisation of values
	}

	for idx, updatespeedevent := range updatespeedeventOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("UpdateSpeedEvent", idx, updatespeedevent.Name)
		map_UpdateSpeedEvent_Identifiers[updatespeedevent] = id

		// Initialisation of values
	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
// Utility function for LadybugStatus
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ladybugstatus LadybugStatus) ToString() (res string) {

	// migration of former implementation of enum
	switch ladybugstatus {
	// insertion code per enum code
	case ON_THE_FENCE:
		res = "ON_THE_FENCE"
	case ON_THE_GROUND:
		res = "ON_THE_GROUND"
	}
	return
}

func (ladybugstatus *LadybugStatus) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "ON_THE_FENCE":
		*ladybugstatus = ON_THE_FENCE
	case "ON_THE_GROUND":
		*ladybugstatus = ON_THE_GROUND
	}
}

