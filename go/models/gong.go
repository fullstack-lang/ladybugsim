// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Ladybugs           map[*Ladybug]any
	Ladybugs_mapString map[string]*Ladybug

	LadybugSimulations           map[*LadybugSimulation]any
	LadybugSimulations_mapString map[string]*LadybugSimulation

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitLadybug(ladybug *Ladybug)
	CheckoutLadybug(ladybug *Ladybug)
	CommitLadybugSimulation(ladybugsimulation *LadybugSimulation)
	CheckoutLadybugSimulation(ladybugsimulation *LadybugSimulation)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Ladybugs:           make(map[*Ladybug]any),
	Ladybugs_mapString: make(map[string]*Ladybug),

	LadybugSimulations:           make(map[*LadybugSimulation]any),
	LadybugSimulations_mapString: make(map[string]*LadybugSimulation),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Ladybug"] = len(stage.Ladybugs)
	stage.Map_GongStructName_InstancesNb["LadybugSimulation"] = len(stage.LadybugSimulations)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Ladybug"] = len(stage.Ladybugs)
	stage.Map_GongStructName_InstancesNb["LadybugSimulation"] = len(stage.LadybugSimulations)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts ladybug to the model stage
func (ladybug *Ladybug) Stage() *Ladybug {
	Stage.Ladybugs[ladybug] = __member
	Stage.Ladybugs_mapString[ladybug.Name] = ladybug

	return ladybug
}

// Unstage removes ladybug off the model stage
func (ladybug *Ladybug) Unstage() *Ladybug {
	delete(Stage.Ladybugs, ladybug)
	delete(Stage.Ladybugs_mapString, ladybug.Name)
	return ladybug
}

// commit ladybug to the back repo (if it is already staged)
func (ladybug *Ladybug) Commit() *Ladybug {
	if _, ok := Stage.Ladybugs[ladybug]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLadybug(ladybug)
		}
	}
	return ladybug
}

// Checkout ladybug to the back repo (if it is already staged)
func (ladybug *Ladybug) Checkout() *Ladybug {
	if _, ok := Stage.Ladybugs[ladybug]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLadybug(ladybug)
		}
	}
	return ladybug
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ladybug to the model stage
func (ladybug *Ladybug) StageCopy() *Ladybug {
	_ladybug := new(Ladybug)
	*_ladybug = *ladybug
	_ladybug.Stage()
	return _ladybug
}

// StageAndCommit appends ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) StageAndCommit() *Ladybug {
	ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
	return ladybug
}

// DeleteStageAndCommit appends ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) DeleteStageAndCommit() *Ladybug {
	ladybug.Unstage()
	DeleteORMLadybug(ladybug)
	return ladybug
}

// StageCopyAndCommit appends a copy of ladybug to the model stage and commit to the orm repo
func (ladybug *Ladybug) StageCopyAndCommit() *Ladybug {
	_ladybug := new(Ladybug)
	*_ladybug = *ladybug
	_ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
	return _ladybug
}

// CreateORMLadybug enables dynamic staging of a Ladybug instance
func CreateORMLadybug(ladybug *Ladybug) {
	ladybug.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybug(ladybug)
	}
}

// DeleteORMLadybug enables dynamic staging of a Ladybug instance
func DeleteORMLadybug(ladybug *Ladybug) {
	ladybug.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLadybug(ladybug)
	}
}

// for satisfaction of GongStruct interface
func (ladybug *Ladybug) GetName() (res string) {
	return ladybug.Name
}

// Stage puts ladybugsimulation to the model stage
func (ladybugsimulation *LadybugSimulation) Stage() *LadybugSimulation {
	Stage.LadybugSimulations[ladybugsimulation] = __member
	Stage.LadybugSimulations_mapString[ladybugsimulation.Name] = ladybugsimulation

	return ladybugsimulation
}

// Unstage removes ladybugsimulation off the model stage
func (ladybugsimulation *LadybugSimulation) Unstage() *LadybugSimulation {
	delete(Stage.LadybugSimulations, ladybugsimulation)
	delete(Stage.LadybugSimulations_mapString, ladybugsimulation.Name)
	return ladybugsimulation
}

// commit ladybugsimulation to the back repo (if it is already staged)
func (ladybugsimulation *LadybugSimulation) Commit() *LadybugSimulation {
	if _, ok := Stage.LadybugSimulations[ladybugsimulation]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLadybugSimulation(ladybugsimulation)
		}
	}
	return ladybugsimulation
}

// Checkout ladybugsimulation to the back repo (if it is already staged)
func (ladybugsimulation *LadybugSimulation) Checkout() *LadybugSimulation {
	if _, ok := Stage.LadybugSimulations[ladybugsimulation]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLadybugSimulation(ladybugsimulation)
		}
	}
	return ladybugsimulation
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of ladybugsimulation to the model stage
func (ladybugsimulation *LadybugSimulation) StageCopy() *LadybugSimulation {
	_ladybugsimulation := new(LadybugSimulation)
	*_ladybugsimulation = *ladybugsimulation
	_ladybugsimulation.Stage()
	return _ladybugsimulation
}

// StageAndCommit appends ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) StageAndCommit() *LadybugSimulation {
	ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
	return ladybugsimulation
}

// DeleteStageAndCommit appends ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) DeleteStageAndCommit() *LadybugSimulation {
	ladybugsimulation.Unstage()
	DeleteORMLadybugSimulation(ladybugsimulation)
	return ladybugsimulation
}

// StageCopyAndCommit appends a copy of ladybugsimulation to the model stage and commit to the orm repo
func (ladybugsimulation *LadybugSimulation) StageCopyAndCommit() *LadybugSimulation {
	_ladybugsimulation := new(LadybugSimulation)
	*_ladybugsimulation = *ladybugsimulation
	_ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
	return _ladybugsimulation
}

// CreateORMLadybugSimulation enables dynamic staging of a LadybugSimulation instance
func CreateORMLadybugSimulation(ladybugsimulation *LadybugSimulation) {
	ladybugsimulation.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLadybugSimulation(ladybugsimulation)
	}
}

// DeleteORMLadybugSimulation enables dynamic staging of a LadybugSimulation instance
func DeleteORMLadybugSimulation(ladybugsimulation *LadybugSimulation) {
	ladybugsimulation.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLadybugSimulation(ladybugsimulation)
	}
}

// for satisfaction of GongStruct interface
func (ladybugsimulation *LadybugSimulation) GetName() (res string) {
	return ladybugsimulation.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMLadybug(Ladybug *Ladybug)
	CreateORMLadybugSimulation(LadybugSimulation *LadybugSimulation)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMLadybug(Ladybug *Ladybug)
	DeleteORMLadybugSimulation(LadybugSimulation *LadybugSimulation)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Ladybugs = make(map[*Ladybug]any)
	stage.Ladybugs_mapString = make(map[string]*Ladybug)

	stage.LadybugSimulations = make(map[*LadybugSimulation]any)
	stage.LadybugSimulations_mapString = make(map[string]*LadybugSimulation)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Ladybugs = nil
	stage.Ladybugs_mapString = nil

	stage.LadybugSimulations = nil
	stage.LadybugSimulations_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Ladybug_Identifiers := make(map[*Ladybug]string)
	_ = map_Ladybug_Identifiers

	ladybugOrdered := []*Ladybug{}
	for ladybug := range stage.Ladybugs {
		ladybugOrdered = append(ladybugOrdered, ladybug)
	}
	sort.Slice(ladybugOrdered[:], func(i, j int) bool {
		return ladybugOrdered[i].Name < ladybugOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Ladybug"
	for idx, ladybug := range ladybugOrdered {

		id = generatesIdentifier("Ladybug", idx, ladybug.Name)
		map_Ladybug_Identifiers[ladybug] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Ladybug")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", ladybug.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Ladybug %s values setup", ladybug.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ladybug.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Id")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybug.Id))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Position")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybug.Position))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybug.Speed))
		initializerStatements += setValueField

		if ladybug.LadybugStatus != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LadybugStatus")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+ladybug.LadybugStatus.ToCodeString())
			initializerStatements += setValueField
		}

	}

	map_LadybugSimulation_Identifiers := make(map[*LadybugSimulation]string)
	_ = map_LadybugSimulation_Identifiers

	ladybugsimulationOrdered := []*LadybugSimulation{}
	for ladybugsimulation := range stage.LadybugSimulations {
		ladybugsimulationOrdered = append(ladybugsimulationOrdered, ladybugsimulation)
	}
	sort.Slice(ladybugsimulationOrdered[:], func(i, j int) bool {
		return ladybugsimulationOrdered[i].Name < ladybugsimulationOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of LadybugSimulation"
	for idx, ladybugsimulation := range ladybugsimulationOrdered {

		id = generatesIdentifier("LadybugSimulation", idx, ladybugsimulation.Name)
		map_LadybugSimulation_Identifiers[ladybugsimulation] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "LadybugSimulation")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", ladybugsimulation.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// LadybugSimulation %s values setup", ladybugsimulation.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(ladybugsimulation.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "EventNb")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.EventNb))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbOfCollision")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.NbOfCollision))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LadybugRadius")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.LadybugRadius))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AbsoluteSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.AbsoluteSpeed))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SimulationStep")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.SimulationStep))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MaxDistanceInOneStep")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.MaxDistanceInOneStep))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbLadybugs")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.NbLadybugs))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbLadybugsOnTheGround")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", ladybugsimulation.NbLadybugsOnTheGround))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LeftRelayInitialPosX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.LeftRelayInitialPosX))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RightRelayInitialPosX")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", ladybugsimulation.RightRelayInitialPosX))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, ladybug := range ladybugOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Ladybug", idx, ladybug.Name)
		map_Ladybug_Identifiers[ladybug] = id

		// Initialisation of values
	}

	for idx, ladybugsimulation := range ladybugsimulationOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("LadybugSimulation", idx, ladybugsimulation.Name)
		map_LadybugSimulation_Identifiers[ladybugsimulation] = id

		// Initialisation of values
		for _, _ladybug := range ladybugsimulation.Ladybugs {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Ladybugs")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Ladybug_Identifiers[_ladybug])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of Ladybug

// generate function for reverse association maps of LadybugSimulation
func (stageStruct *StageStruct) CreateReverseMap_LadybugSimulation_Ladybugs() (res map[*Ladybug]*LadybugSimulation) {
	res = make(map[*Ladybug]*LadybugSimulation)

	for ladybugsimulation := range stageStruct.LadybugSimulations {
		for _, ladybug_ := range ladybugsimulation.Ladybugs {
			res[ladybug_] = ladybugsimulation
		}
	}

	return
}


// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Ladybug | LadybugSimulation
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Ladybug | *LadybugSimulation
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Ladybug]any |
		map[*LadybugSimulation]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Ladybug |
		map[string]*LadybugSimulation |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Ladybug]any:
		return any(&Stage.Ladybugs).(*Type)
	case map[*LadybugSimulation]any:
		return any(&Stage.LadybugSimulations).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Ladybug:
		return any(&Stage.Ladybugs_mapString).(*Type)
	case map[string]*LadybugSimulation:
		return any(&Stage.LadybugSimulations_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Ladybug:
		return any(&Stage.Ladybugs).(*map[*Type]any)
	case LadybugSimulation:
		return any(&Stage.LadybugSimulations).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Ladybug:
		return any(&Stage.Ladybugs_mapString).(*map[string]*Type)
	case LadybugSimulation:
		return any(&Stage.LadybugSimulations_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Ladybug:
		return any(&Ladybug{
			// Initialisation of associations
		}).(*Type)
	case LadybugSimulation:
		return any(&LadybugSimulation{
			// Initialisation of associations
			// field is initialized with an instance of Ladybug with the name of the field
			Ladybugs: []*Ladybug{{Name: "Ladybugs"}},
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Ladybug
	case Ladybug:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LadybugSimulation
	case LadybugSimulation:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Ladybug
	case Ladybug:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LadybugSimulation
	case LadybugSimulation:
		switch fieldname {
		// insertion point for per direct association field
		case "Ladybugs":
			res := make(map[*Ladybug]*LadybugSimulation)
			for ladybugsimulation := range Stage.LadybugSimulations {
				for _, ladybug_ := range ladybugsimulation.Ladybugs {
					res[ladybug_] = ladybugsimulation
				}
			}
			return any(res).(map[*End]*Start)
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Ladybug:
		res = "Ladybug"
	case LadybugSimulation:
		res = "LadybugSimulation"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Ladybug:
		res = []string{"Name", "Id", "Position", "Speed", "LadybugStatus"}
	case LadybugSimulation:
		res = []string{"Name", "EventNb", "NbOfCollision", "LadybugRadius", "AbsoluteSpeed", "SimulationStep", "MaxDistanceInOneStep", "NbLadybugs", "NbLadybugsOnTheGround", "LeftRelayInitialPosX", "RightRelayInitialPosX", "Ladybugs"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Ladybug:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Ladybug).Name
		case "Id":
			res = fmt.Sprintf("%d", any(instance).(Ladybug).Id)
		case "Position":
			res = fmt.Sprintf("%f", any(instance).(Ladybug).Position)
		case "Speed":
			res = fmt.Sprintf("%f", any(instance).(Ladybug).Speed)
		case "LadybugStatus":
			enum := any(instance).(Ladybug).LadybugStatus
			res = enum.ToCodeString()
		}
	case LadybugSimulation:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(LadybugSimulation).Name
		case "EventNb":
			res = fmt.Sprintf("%d", any(instance).(LadybugSimulation).EventNb)
		case "NbOfCollision":
			res = fmt.Sprintf("%d", any(instance).(LadybugSimulation).NbOfCollision)
		case "LadybugRadius":
			res = fmt.Sprintf("%f", any(instance).(LadybugSimulation).LadybugRadius)
		case "AbsoluteSpeed":
			res = fmt.Sprintf("%f", any(instance).(LadybugSimulation).AbsoluteSpeed)
		case "SimulationStep":
			res = fmt.Sprintf("%d", any(instance).(LadybugSimulation).SimulationStep)
		case "MaxDistanceInOneStep":
			res = fmt.Sprintf("%f", any(instance).(LadybugSimulation).MaxDistanceInOneStep)
		case "NbLadybugs":
			res = fmt.Sprintf("%d", any(instance).(LadybugSimulation).NbLadybugs)
		case "NbLadybugsOnTheGround":
			res = fmt.Sprintf("%d", any(instance).(LadybugSimulation).NbLadybugsOnTheGround)
		case "LeftRelayInitialPosX":
			res = fmt.Sprintf("%f", any(instance).(LadybugSimulation).LeftRelayInitialPosX)
		case "RightRelayInitialPosX":
			res = fmt.Sprintf("%f", any(instance).(LadybugSimulation).RightRelayInitialPosX)
		case "Ladybugs":
			for idx, __instance__ := range any(instance).(LadybugSimulation).Ladybugs {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	}
	return
}

// insertion point of enum utility functions
// Utility function for LadybugStatus
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (ladybugstatus LadybugStatus) ToString() (res string) {

	// migration of former implementation of enum
	switch ladybugstatus {
	// insertion code per enum code
	case ON_THE_FENCE:
		res = "ON_THE_FENCE"
	case ON_THE_GROUND:
		res = "ON_THE_GROUND"
	}
	return
}

func (ladybugstatus *LadybugStatus) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "ON_THE_FENCE":
		*ladybugstatus = ON_THE_FENCE
	case "ON_THE_GROUND":
		*ladybugstatus = ON_THE_GROUND
	}
}

func (ladybugstatus *LadybugStatus) ToCodeString() (res string) {

	switch *ladybugstatus {
	// insertion code per enum code
	case ON_THE_FENCE:
		res = "ON_THE_FENCE"
	case ON_THE_GROUND:
		res = "ON_THE_GROUND"
	}
	return
}

// Last line of the template
